{
    "genesis_time": "2024-02-08T00:17:23.342520258Z",
    "chain_id": "xian-local",
    "initial_height": "0",
    "consensus_params": {
        "block": {
            "max_bytes": "22020096",
            "max_gas": "-1",
            "time_iota_ms": "1000"
        },
        "evidence": {
            "max_age_num_blocks": "100000",
            "max_age_duration": "172800000000000",
            "max_bytes": "1048576"
        },
        "validator": {
            "pub_key_types": [
                "ed25519"
            ]
        },
        "version": {}
    },
    "validators": [
        {
            "address": "E3DB888ED46239A3265B681460BCEA1B28C22736",
            "pub_key": {
                "type": "tendermint/PubKeyEd25519",
                "value": "6eiq0pzo6U/XfZxVWC5eDFfPgcVSumHA1ONLDcEf2TE="
            },
            "power": "10",
            "name": ""
        }
    ],
    "abci_genesis": {
        "hash": "31323662643132363639383163636337623062643937346537343631373334343537393138333065396663396166353337353864336263633435373739616163",
        "number": 141,
        "origin": {
            "signature": "",
            "sender": ""
        },
        "genesis": [
            {
                "key": "con_counter.__code__",
                "value": "__counter = Variable(contract='con_counter', name='counter')\n__address_to_counter = Hash(default_value=0, contract='con_counter', name=\n    'address_to_counter')\n__owner = Variable(contract='con_counter', name='owner')\n__stopped = Variable(contract='con_counter', name='stopped')\n\n\ndef ____():\n    __counter.set(0)\n    __owner.set(ctx.caller)\n    __stopped.set(False)\n\n\n@__export('con_counter')\ndef increment_counter():\n    assert not __stopped.get(), 'Contract is stopped'\n    assert 'con_' not in ctx.caller, 'Contracts cannot call this function'\n    __counter.set(__counter.get() + 1)\n    __address_to_counter[ctx.caller] = __address_to_counter[ctx.caller] + 1\n    return __counter.get()\n\n\n@__export('con_counter')\ndef get_counter():\n    return __counter.get()\n\n\n@__export('con_counter')\ndef get_address_counter(address: str):\n    return __address_to_counter[address]\n\n\n@__export('con_counter')\ndef stop():\n    assert ctx.caller == __owner.get(), 'Only the owner can stop the contract'\n    __stopped.set(True)\n    return True\n\n\n@__export('con_counter')\ndef start():\n    assert ctx.caller == __owner.get(), 'Only the owner can start the contract'\n    __stopped.set(False)\n    return True\n\n\n@__export('con_counter')\ndef reset():\n    assert ctx.caller == __owner.get(), 'Only the owner can reset the contract'\n    __counter.set(0)\n    __address_to_counter.clear()\n    return True\n"
            },
            {
                "key": "con_counter.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_counter.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        17,
                        8,
                        20,
                        14,
                        0
                    ]
                }
            },
            {
                "key": "con_counter.address_to_counter:1e9043a943ec2985200029add5d031cbcc012ca8dc0b8ab6e7694bb475924c9b",
                "value": 1
            },
            {
                "key": "con_counter.address_to_counter:5fa1b314468832fb9d391e8af756140e85325a565d8b411ae2f2001d37c30ef4",
                "value": 8
            },
            {
                "key": "con_counter.address_to_counter:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                "value": 3
            },
            {
                "key": "con_counter.address_to_counter:8ce11ec41a14ba8a3545b3214f5913bb129bd686b392d496359fc98f89da490a",
                "value": 8
            },
            {
                "key": "con_counter.address_to_counter:ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9",
                "value": 3
            },
            {
                "key": "con_counter.counter",
                "value": 23
            },
            {
                "key": "con_counter.owner",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_counter.stopped",
                "value": false
            },
            {
                "key": "con_dafuq.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_dafuq', name='balances')\n__metadata = Hash(contract='con_dafuq', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_dafuq')\ndef hello():\n    return 'hello'\n"
            },
            {
                "key": "con_dafuq.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_dafuq.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        23,
                        10,
                        47,
                        8,
                        0
                    ]
                }
            },
            {
                "key": "con_dafuq.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 1000000
            },
            {
                "key": "con_dafuq.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_dafuq.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_dafuq.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_dafuq.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_dafuq.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_dafuq1.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_dafuq1', name='balances')\n__metadata = Hash(contract='con_dafuq1', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_dafuq1')\ndef hello():\n    return 'hello'\n"
            },
            {
                "key": "con_dafuq1.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_dafuq1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        23,
                        14,
                        37,
                        19,
                        0
                    ]
                }
            },
            {
                "key": "con_dafuq1.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 1000000
            },
            {
                "key": "con_dafuq1.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_dafuq1.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_dafuq1.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_dafuq1.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_dafuq1.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_dafuq1123.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_dafuq1123', name='balances')\n__metadata = Hash(contract='con_dafuq1123', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_dafuq1123')\ndef hello():\n    return 'hello'\n"
            },
            {
                "key": "con_dafuq1123.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_dafuq1123.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        23,
                        14,
                        57,
                        55,
                        0
                    ]
                }
            },
            {
                "key": "con_dafuq1123.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 1000000
            },
            {
                "key": "con_dafuq1123.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_dafuq1123.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_dafuq1123.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_dafuq1123.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_dafuq1123.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_daq.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_daq', name='balances')\n__metadata = Hash(contract='con_daq', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_daq')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_daq')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to}'\n\n\n@__export('con_daq')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n    return f'Approved {amount} for {to}'\n\n\n@__export('con_daq')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n    return f'Sent {amount} to {to} from {main_account}'\n"
            },
            {
                "key": "con_daq.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_daq.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        13,
                        17,
                        23,
                        2,
                        0
                    ]
                }
            },
            {
                "key": "con_daq.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 1000000
            },
            {
                "key": "con_daq.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_daq.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_daq.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_daq.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_daq.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_hello.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_hello', name='balances')\n__metadata = Hash(contract='con_hello', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_hello')\ndef hello():\n    return 'hello'\n"
            },
            {
                "key": "con_hello.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_hello.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        20,
                        9,
                        50,
                        39,
                        0
                    ]
                }
            },
            {
                "key": "con_hello.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 1000000
            },
            {
                "key": "con_hello.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_hello.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_hello.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_hello.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_hello.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_hello1.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_hello1', name='balances')\n__metadata = Hash(contract='con_hello1', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'TEST TOKEN'\n    __metadata['token_symbol'] = 'TST'\n    __metadata['token_logo_url'] = 'https://some.token.url/test-token.png'\n    __metadata['token_website'] = 'https://some.token.url'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_hello1')\ndef hello():\n    return 'hello'\n"
            },
            {
                "key": "con_hello1.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_hello1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        20,
                        9,
                        51,
                        3,
                        0
                    ]
                }
            },
            {
                "key": "con_hello1.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 1000000
            },
            {
                "key": "con_hello1.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_hello1.metadata:token_logo_url",
                "value": "https://some.token.url/test-token.png"
            },
            {
                "key": "con_hello1.metadata:token_name",
                "value": "TEST TOKEN"
            },
            {
                "key": "con_hello1.metadata:token_symbol",
                "value": "TST"
            },
            {
                "key": "con_hello1.metadata:token_website",
                "value": "https://some.token.url"
            },
            {
                "key": "con_multi12345.__code__",
                "value": "I = importlib\n\n\n@__export('con_multi12345')\ndef send(addresses: list, amount: float, contract: str):\n    token = I.import_module(contract)\n    for address in addresses:\n        token.transfer_from(amount=amount, to=address, main_account=ctx.signer)\n"
            },
            {
                "key": "con_multi12345.__developer__",
                "value": "b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb98d"
            },
            {
                "key": "con_multi12345.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        14,
                        12,
                        48,
                        58,
                        0
                    ]
                }
            },
            {
                "key": "con_multisend.__code__",
                "value": "I = importlib\n\n\n@__export('con_multisend')\ndef send(addresses: list, amount: float, contract: str):\n    token = I.import_module(contract)\n    for address in addresses:\n        token.transfer_from(amount=amount, to=address, main_account=ctx.signer)\n"
            },
            {
                "key": "con_multisend.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_multisend.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        11,
                        11,
                        40,
                        57,
                        0
                    ]
                }
            },
            {
                "key": "con_my_cool_contract.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_my_cool_contract', name='game')\n__rolls = Hash(default_value=False, contract='con_my_cool_contract', name=\n    'rolls')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['total_wins'] = 0\n    __game['total_losses'] = 0\n    __game['total_rolls'] = 0\n    __game['allowed_tokens'] = ['currency']\n    __game['max_token_bet', 'currency'] = 1000\n    __game['house_edge'] = decimal('0.03')\n\n\n@__export('con_my_cool_contract')\ndef roll(bet_size: float, token_contract: str, roll_type: str, roll_target: int\n    ):\n    __balances = ForeignHash(foreign_contract=token_contract, foreign_name=\n        'balances', contract='con_my_cool_contract', name='balances')\n    assert bet_size > 0, 'Bet size must be greater than 0'\n    assert token_contract in __game['allowed_tokens'], 'Token not allowed'\n    assert bet_size <= __game['max_token_bet', token_contract\n        ], 'Bet size exceeds the maximum allowed bet'\n    assert roll_type in ['over', 'under'], 'Invalid roll type'\n    if roll_type == 'over':\n        assert 1 <= roll_target < 100, 'Roll target must be between 1 and 99 for over rolls'\n    else:\n        assert 2 <= roll_target <= 100, 'Roll target must be between 2 and 100 for under rolls'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=bet_size, to=ctx.this, main_account=ctx.caller)\n    roll_range = (1, roll_target) if roll_type == 'under' else (roll_target,\n        100)\n    roll_range_size = roll_range[1] - roll_range[0] + 1\n    fair_multiplier = 100 / roll_range_size\n    adjusted_multiplier = fair_multiplier * (1 - __game['house_edge'])\n    assert __balances[ctx.this\n        ] >= bet_size * adjusted_multiplier, 'Contract does not have enough funds to cover the bet'\n    __game['total_rolls'] += 1\n    roll = random.randint(1, 100)\n    __rolls[ctx.caller, __game['total_rolls']] = roll\n    if (roll_type == 'over' and roll > roll_target or roll_type == 'under' and\n        roll < roll_target):\n        win_amount = bet_size * adjusted_multiplier\n        token.transfer(amount=win_amount, to=ctx.caller)\n        __game['total_wins'] += 1\n        return f'You rolled {roll}. You win {win_amount} {token_contract}!'\n    else:\n        __game['total_losses'] += 1\n        return f'You lose! You rolled {roll}'\n\n\n@__export('con_my_cool_contract')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_my_cool_contract')\ndef change_allowed_tokens(tokens: list):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the allowed tokens'\n    __game['allowed_tokens'] = tokens\n\n\n@__export('con_my_cool_contract')\ndef change_max_token_bet(token_contract: str, max_bet: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the max token bet'\n    __game['max_token_bet', token_contract] = max_bet\n\n\n@__export('con_my_cool_contract')\ndef change_house_edge(new_edge: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the house edge'\n    assert 0 <= new_edge < 1, 'House edge must be between 0 and 1. For example, 0.03 represents 3%'\n    __game['house_edge'] = new_edge\n\n\n@__export('con_my_cool_contract')\ndef withdraw(amount: float, token_contract: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can withdraw'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.caller)\n"
            },
            {
                "key": "con_my_cool_contract.__developer__",
                "value": "7c829aba18409ce70bd6fec16cd57108862c3433c637e88087459d98acfcf40d"
            },
            {
                "key": "con_my_cool_contract.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        13,
                        10,
                        27,
                        42,
                        0
                    ]
                }
            },
            {
                "key": "con_my_cool_contract.game:allowed_tokens",
                "value": [
                    "currency"
                ]
            },
            {
                "key": "con_my_cool_contract.game:house_edge",
                "value": {
                    "__fixed__": "0.03"
                }
            },
            {
                "key": "con_my_cool_contract.game:max_token_bet:currency",
                "value": 1000
            },
            {
                "key": "con_my_cool_contract.game:owner",
                "value": "7c829aba18409ce70bd6fec16cd57108862c3433c637e88087459d98acfcf40d"
            },
            {
                "key": "con_my_cool_contract.game:total_losses",
                "value": 0
            },
            {
                "key": "con_my_cool_contract.game:total_rolls",
                "value": 0
            },
            {
                "key": "con_my_cool_contract.game:total_wins",
                "value": 0
            },
            {
                "key": "con_my_cool_contract1.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_my_cool_contract1', name='game')\n__rolls = Hash(default_value=False, contract='con_my_cool_contract1', name=\n    'rolls')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['total_wins'] = 0\n    __game['total_losses'] = 0\n    __game['total_rolls'] = 0\n    __game['allowed_tokens'] = ['currency']\n    __game['max_token_bet', 'currency'] = 1000\n    __game['house_edge'] = decimal('0.03')\n\n\n@__export('con_my_cool_contract1')\ndef roll(bet_size: float, token_contract: str, roll_type: str, roll_target: int\n    ):\n    __balances = ForeignHash(foreign_contract=token_contract, foreign_name=\n        'balances', contract='con_my_cool_contract1', name='balances')\n    assert bet_size > 0, 'Bet size must be greater than 0'\n    assert token_contract in __game['allowed_tokens'], 'Token not allowed'\n    assert bet_size <= __game['max_token_bet', token_contract\n        ], 'Bet size exceeds the maximum allowed bet'\n    assert roll_type in ['over', 'under'], 'Invalid roll type'\n    if roll_type == 'over':\n        assert 1 <= roll_target < 100, 'Roll target must be between 1 and 99 for over rolls'\n    else:\n        assert 2 <= roll_target <= 100, 'Roll target must be between 2 and 100 for under rolls'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=bet_size, to=ctx.this, main_account=ctx.caller)\n    roll_range = (1, roll_target) if roll_type == 'under' else (roll_target,\n        100)\n    roll_range_size = roll_range[1] - roll_range[0] + 1\n    fair_multiplier = 100 / roll_range_size\n    adjusted_multiplier = fair_multiplier * (1 - __game['house_edge'])\n    assert __balances[ctx.this\n        ] >= bet_size * adjusted_multiplier, 'Contract does not have enough funds to cover the bet'\n    __game['total_rolls'] += 1\n    roll = random.randint(1, 100)\n    __rolls[ctx.caller, __game['total_rolls']] = roll\n    if (roll_type == 'over' and roll > roll_target or roll_type == 'under' and\n        roll < roll_target):\n        win_amount = bet_size * adjusted_multiplier\n        token.transfer(amount=win_amount, to=ctx.caller)\n        __game['total_wins'] += 1\n        return f'You rolled {roll}. You win {win_amount} {token_contract}!'\n    else:\n        __game['total_losses'] += 1\n        return f'You lose! You rolled {roll}'\n\n\n@__export('con_my_cool_contract1')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_my_cool_contract1')\ndef change_allowed_tokens(tokens: list):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the allowed tokens'\n    __game['allowed_tokens'] = tokens\n\n\n@__export('con_my_cool_contract1')\ndef change_max_token_bet(token_contract: str, max_bet: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the max token bet'\n    __game['max_token_bet', token_contract] = max_bet\n\n\n@__export('con_my_cool_contract1')\ndef change_house_edge(new_edge: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the house edge'\n    assert 0 <= new_edge < 1, 'House edge must be between 0 and 1. For example, 0.03 represents 3%'\n    __game['house_edge'] = new_edge\n\n\n@__export('con_my_cool_contract1')\ndef withdraw(amount: float, token_contract: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can withdraw'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.caller)\n"
            },
            {
                "key": "con_my_cool_contract1.__developer__",
                "value": "7c829aba18409ce70bd6fec16cd57108862c3433c637e88087459d98acfcf40d"
            },
            {
                "key": "con_my_cool_contract1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        13,
                        10,
                        29,
                        9,
                        0
                    ]
                }
            },
            {
                "key": "con_my_cool_contract1.game:allowed_tokens",
                "value": [
                    "currency"
                ]
            },
            {
                "key": "con_my_cool_contract1.game:house_edge",
                "value": {
                    "__fixed__": "0.03"
                }
            },
            {
                "key": "con_my_cool_contract1.game:max_token_bet:currency",
                "value": 1000
            },
            {
                "key": "con_my_cool_contract1.game:owner",
                "value": "7c829aba18409ce70bd6fec16cd57108862c3433c637e88087459d98acfcf40d"
            },
            {
                "key": "con_my_cool_contract1.game:total_losses",
                "value": 0
            },
            {
                "key": "con_my_cool_contract1.game:total_rolls",
                "value": 0
            },
            {
                "key": "con_my_cool_contract1.game:total_wins",
                "value": 0
            },
            {
                "key": "con_my_cool_contract22.__code__",
                "value": "random.seed()\n__game = Hash(contract='con_my_cool_contract22', name='game')\n__rolls = Hash(default_value=False, contract='con_my_cool_contract22', name\n    ='rolls')\n\n\ndef ____():\n    __game['owner'] = ctx.caller\n    __game['total_wins'] = 0\n    __game['total_losses'] = 0\n    __game['total_rolls'] = 0\n    __game['allowed_tokens'] = ['currency']\n    __game['max_token_bet', 'currency'] = 1000\n    __game['house_edge'] = decimal('0.03')\n\n\n@__export('con_my_cool_contract22')\ndef roll(bet_size: float, token_contract: str, roll_type: str, roll_target: int\n    ):\n    __balances = ForeignHash(foreign_contract=token_contract, foreign_name=\n        'balances', contract='con_my_cool_contract22', name='balances')\n    assert bet_size > 0, 'Bet size must be greater than 0'\n    assert token_contract in __game['allowed_tokens'], 'Token not allowed'\n    assert bet_size <= __game['max_token_bet', token_contract\n        ], 'Bet size exceeds the maximum allowed bet'\n    assert roll_type in ['over', 'under'], 'Invalid roll type'\n    if roll_type == 'over':\n        assert 1 <= roll_target < 100, 'Roll target must be between 1 and 99 for over rolls'\n    else:\n        assert 2 <= roll_target <= 100, 'Roll target must be between 2 and 100 for under rolls'\n    token = importlib.import_module(token_contract)\n    token.transfer_from(amount=bet_size, to=ctx.this, main_account=ctx.caller)\n    roll_range = (1, roll_target) if roll_type == 'under' else (roll_target,\n        100)\n    roll_range_size = roll_range[1] - roll_range[0] + 1\n    fair_multiplier = 100 / roll_range_size\n    adjusted_multiplier = fair_multiplier * (1 - __game['house_edge'])\n    assert __balances[ctx.this\n        ] >= bet_size * adjusted_multiplier, 'Contract does not have enough funds to cover the bet'\n    __game['total_rolls'] += 1\n    roll = random.randint(1, 100)\n    __rolls[ctx.caller, __game['total_rolls']] = roll\n    if (roll_type == 'over' and roll > roll_target or roll_type == 'under' and\n        roll < roll_target):\n        win_amount = bet_size * adjusted_multiplier\n        token.transfer(amount=win_amount, to=ctx.caller)\n        __game['total_wins'] += 1\n        return f'You rolled {roll}. You win {win_amount} {token_contract}!'\n    else:\n        __game['total_losses'] += 1\n        return f'You lose! You rolled {roll}'\n\n\n@__export('con_my_cool_contract22')\ndef change_owner(new_owner: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can change the owner'\n    __game['owner'] = new_owner\n\n\n@__export('con_my_cool_contract22')\ndef change_allowed_tokens(tokens: list):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the allowed tokens'\n    __game['allowed_tokens'] = tokens\n\n\n@__export('con_my_cool_contract22')\ndef change_max_token_bet(token_contract: str, max_bet: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the max token bet'\n    __game['max_token_bet', token_contract] = max_bet\n\n\n@__export('con_my_cool_contract22')\ndef change_house_edge(new_edge: float):\n    assert ctx.caller == __game['owner'\n        ], 'Only the owner can change the house edge'\n    assert 0 <= new_edge < 1, 'House edge must be between 0 and 1. For example, 0.03 represents 3%'\n    __game['house_edge'] = new_edge\n\n\n@__export('con_my_cool_contract22')\ndef withdraw(amount: float, token_contract: str):\n    assert ctx.caller == __game['owner'], 'Only the owner can withdraw'\n    token = importlib.import_module(token_contract)\n    token.transfer(amount=amount, to=ctx.caller)\n"
            },
            {
                "key": "con_my_cool_contract22.__developer__",
                "value": "7c829aba18409ce70bd6fec16cd57108862c3433c637e88087459d98acfcf40d"
            },
            {
                "key": "con_my_cool_contract22.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        13,
                        10,
                        32,
                        38,
                        0
                    ]
                }
            },
            {
                "key": "con_my_cool_contract22.game:allowed_tokens",
                "value": [
                    "currency"
                ]
            },
            {
                "key": "con_my_cool_contract22.game:house_edge",
                "value": {
                    "__fixed__": "0.03"
                }
            },
            {
                "key": "con_my_cool_contract22.game:max_token_bet:currency",
                "value": 1000
            },
            {
                "key": "con_my_cool_contract22.game:owner",
                "value": "7c829aba18409ce70bd6fec16cd57108862c3433c637e88087459d98acfcf40d"
            },
            {
                "key": "con_my_cool_contract22.game:total_losses",
                "value": 0
            },
            {
                "key": "con_my_cool_contract22.game:total_rolls",
                "value": 0
            },
            {
                "key": "con_my_cool_contract22.game:total_wins",
                "value": 0
            },
            {
                "key": "con_my_cool_token.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_my_cool_token', name=\n    'balances')\n__metadata = Hash(contract='con_my_cool_token', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_my_cool_token')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_my_cool_token')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_my_cool_token')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_my_cool_token')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_my_cool_token.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_my_cool_token.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        14,
                        9,
                        55,
                        31,
                        0
                    ]
                }
            },
            {
                "key": "con_my_cool_token.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_my_cool_token.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_my_cool_token.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_my_cool_token.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_my_cool_token1.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_my_cool_token1', name=\n    'balances')\n__metadata = Hash(contract='con_my_cool_token1', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_my_cool_token1')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_my_cool_token1')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_my_cool_token1')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_my_cool_token1')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_my_cool_token1.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_my_cool_token1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        25,
                        18,
                        14,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_my_cool_token1.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_my_cool_token1.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_my_cool_token1.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_my_cool_token1.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_nameservice.__code__",
                "value": "import currency\n__collection_name = Variable(contract='con_nameservice', name='collection_name'\n    )\n__collection_owner = Variable(contract='con_nameservice', name=\n    'collection_owner')\n__collection_nfts = Hash(default_value=False, contract='con_nameservice',\n    name='collection_nfts')\n__collection_balances = Hash(default_value=0, contract='con_nameservice',\n    name='collection_balances')\n__collection_balances_approvals = Hash(default_value=0, contract=\n    'con_nameservice', name='collection_balances_approvals')\n__mint_price = Variable(contract='con_nameservice', name='mint_price')\n__royalty_fee_percentage = Variable(contract='con_nameservice', name=\n    'royalty_fee_percentage')\n__contracts_allowlist = Variable(contract='con_nameservice', name=\n    'contracts_allowlist')\n\n\ndef ____(name: str, owner: str):\n    __collection_name.set(name)\n    __collection_owner.set(owner)\n    __contracts_allowlist.set([])\n    __mint_price.set(1)\n    __royalty_fee_percentage.set(2)\n\n\n@__export('con_nameservice')\ndef mint_nft(name: str):\n    name = name.lower()\n    assert name.isalnum(), 'Name must be alphanumeric'\n    assert __collection_nfts[name] == False, 'Name already exists'\n    assert len(name) >= 3, 'The minimum length is 3 characters'\n    assert len(name) <= 32, 'The maximum length is 32 characters'\n    currency.transfer_from(amount=__mint_price.get(), to=__collection_owner\n        .get(), main_account=ctx.caller)\n    __collection_nfts[name] = {'description':\n        'A alias name for your wallet.', 'ipfs_image_url': '', 'metadata':\n        {}, 'amount': 1}\n    __collection_balances[ctx.caller, name] = 1\n\n\n@__export('con_nameservice')\ndef transfer(name: str, amount: int, to: str):\n    assert amount > 0, 'You cannot transfer negative amounts'\n    assert name != '', 'Please specify the name of the NFT you want to transfer'\n    assert __collection_balances[ctx.caller, name\n        ] >= amount, \"You don't have enough NFTs to send\"\n    __collection_balances[ctx.caller, name] -= amount\n    __collection_balances[to, name] += amount\n\n\n@__export('con_nameservice')\ndef approve(amount: int, name: str, to: str):\n    assert amount > 0, 'Cannot approve negative amounts'\n    __collection_balances_approvals[ctx.caller, to, name] += amount\n\n\n@__export('con_nameservice')\ndef transfer_from(name: str, amount: int, to: str, main_account: str):\n    if 'con_' in ctx.caller:\n        assert ctx.caller in __contracts_allowlist.get(\n            ), 'This contract is not allowed to interact with this contract'\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __collection_balances_approvals[main_account, to, name\n        ] >= amount, 'Not enough NFTs approved to send! You have {} and are trying to spend {}'.format(\n        __collection_balances_approvals[main_account, to, name], amount)\n    assert __collection_balances[main_account, name\n        ] >= amount, 'Not enough NFTs to send!'\n    __collection_balances_approvals[main_account, to, name] -= amount\n    __collection_balances[main_account, name] -= amount\n    __collection_balances[to, name] += amount\n\n\n@__export('con_nameservice')\ndef set_mint_price(price: int):\n    assert ctx.caller == __collection_owner.get(\n        ), 'You are not the owner of this collection'\n    __mint_price.set(price)\n\n\n@__export('con_nameservice')\ndef set_royalty_fee_percentage(percentage: int):\n    assert ctx.caller == __collection_owner.get(\n        ), 'You are not the owner of this collection'\n    __royalty_fee_percentage.set(percentage)\n\n\n@__export('con_nameservice')\ndef set_collection_owner(owner: str):\n    assert ctx.caller == __collection_owner.get(\n        ), 'You are not the owner of this collection'\n    __collection_owner.set(owner)\n\n\n@__export('con_nameservice')\ndef set_contract_allowlist(contracts: list):\n    assert ctx.caller == __collection_owner.get(\n        ), 'You are not the owner of this collection'\n    __contracts_allowlist.set(contracts)\n"
            },
            {
                "key": "con_nameservice.__developer__",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_nameservice.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        16,
                        17,
                        31,
                        50,
                        0
                    ]
                }
            },
            {
                "key": "con_nameservice.collection_balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:crosschainer",
                "value": 1
            },
            {
                "key": "con_nameservice.collection_balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:duelingbenjos",
                "value": 1
            },
            {
                "key": "con_nameservice.collection_balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:endogen",
                "value": 1
            },
            {
                "key": "con_nameservice.collection_balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:xian",
                "value": 1
            },
            {
                "key": "con_nameservice.collection_name",
                "value": "Xian Nameservice"
            },
            {
                "key": "con_nameservice.collection_nfts:crosschainer",
                "value": {
                    "description": "A alias name for your wallet.",
                    "ipfs_image_url": "",
                    "metadata": {},
                    "amount": 1
                }
            },
            {
                "key": "con_nameservice.collection_nfts:duelingbenjos",
                "value": {
                    "description": "A alias name for your wallet.",
                    "ipfs_image_url": "",
                    "metadata": {},
                    "amount": 1
                }
            },
            {
                "key": "con_nameservice.collection_nfts:endogen",
                "value": {
                    "description": "A alias name for your wallet.",
                    "ipfs_image_url": "",
                    "metadata": {},
                    "amount": 1
                }
            },
            {
                "key": "con_nameservice.collection_nfts:xian",
                "value": {
                    "description": "A alias name for your wallet.",
                    "ipfs_image_url": "",
                    "metadata": {},
                    "amount": 1
                }
            },
            {
                "key": "con_nameservice.collection_owner",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "con_nameservice.contracts_allowlist",
                "value": []
            },
            {
                "key": "con_nameservice.mint_price",
                "value": 1
            },
            {
                "key": "con_nameservice.royalty_fee_percentage",
                "value": 2
            },
            {
                "key": "con_pixel_frames_auction.S:thing_master_contract",
                "value": "con_pixel_frames_master"
            },
            {
                "key": "con_pixel_frames_auction.__code__",
                "value": "import currency\nI = importlib\n__Thing_Info = ForeignHash(foreign_contract='con_pixel_frames',\n    foreign_name='S', contract='con_pixel_frames_auction', name='Thing_Info')\n__S = Hash(default_value=None, contract='con_pixel_frames_auction', name='S')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_auction',\n    name='metadata')\n\n\ndef ____():\n    __S['thing_master_contract'] = 'con_pixel_frames_master'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_pixel_frames_auction')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_auction')\ndef operator_transfer_thing(uid: str, new_owner: str):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer things from contract.'\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=uid, new_owner=new_owner)\n    __S[uid] = False\n\n\n@__export('con_pixel_frames_auction')\ndef operator_transfer_currency(amount: str, to: float):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer currency from contract.'\n    currency.transfer(amount=amount, to=to)\n\n\ndef __get_listing_info(uid: str):\n    listing_info = __S[uid]\n    assert listing_info is not None, \"Listing doesn't exist!\"\n    return {'start_date': __S[uid, 'start_date'], 'end_date': __S[uid,\n        'end_date'], 'current_owner': __S[uid, 'current_owner'], 'uid': __S\n        [uid, 'uid'], 'reserve_price': __S[uid, 'reserve_price'],\n        'current_bid': __S[uid, 'current_bid'], 'current_winner': __S[uid,\n        'current_winner'], 'royalty_percent': __S[uid, 'royalty_percent'],\n        'creator': __S[uid, 'creator']}\n\n\n@__export('con_pixel_frames_auction')\ndef auction_thing(uid: str, reserve_price: float, start_date: datetime.\n    datetime, end_date: datetime.datetime):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer_from(uid=uid, to=ctx.this, main_account=\n        ctx.caller)\n    assert not __S[uid], 'Auction has already started!'\n    assert end_date > now, 'end_date is in the past'\n    assert reserve_price >= 0, 'reserve_price cannot be less than 0'\n    __S[uid, 'start_date'] = start_date\n    __S[uid, 'end_date'] = end_date\n    __S[uid, 'current_owner'] = ctx.caller\n    __S[uid, 'uid'] = uid\n    __S[uid, 'reserve_price'] = reserve_price\n    __S[uid, 'current_bid'] = None\n    __S[uid, 'current_winner'] = ''\n    __S[uid, 'royalty_percent'] = __Thing_Info[uid, 'meta', 'royalty_percent']\n    __S[uid, 'creator'] = __Thing_Info[uid, 'creator']\n    __S[uid] = True\n\n\n@__export('con_pixel_frames_auction')\ndef end_auction(uid: str, end_early: bool):\n    listing_info = __get_listing_info(uid=uid)\n    if end_early:\n        assert listing_info['current_owner'] == ctx.caller or __metadata[\n            'operator'\n            ] == ctx.caller, 'Only thing owner or auction operator can end the auction early!'\n        if now < listing_info['start_date']:\n            __process_auction_result_no_winner(listing_info)\n        elif (listing_info['current_bid'] or -1) < listing_info['reserve_price'\n            ]:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            assert False, 'Cannot end early. Auction started or reserve has been met.'\n    else:\n        assert now > listing_info['end_date'], 'Auction is still pending!'\n        if listing_info['current_bid'] == None or listing_info['current_bid'\n            ] < listing_info['reserve_price']:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            __process_auction_result(listing_info)\n\n\ndef __process_auction_result_no_winner(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_owner'])\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[listing_info['uid']] = False\n\n\ndef __process_auction_result(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_winner'])\n    royalty_percent = listing_info['royalty_percent']\n    if royalty_percent > 0:\n        royalty_amount = listing_info['current_bid'] * (royalty_percent / 100)\n        net_amount = listing_info['current_bid'] - royalty_amount\n        currency.transfer(to=listing_info['creator'], amount=royalty_amount)\n    else:\n        net_amount = listing_info['current_bid']\n    currency.transfer(to=listing_info['current_owner'], amount=net_amount)\n    __S[listing_info['uid']] = False\n\n\n@__export('con_pixel_frames_auction')\ndef bid(uid: str, bid_amount: float):\n    listing_info = __get_listing_info(uid=uid)\n    current_bid = listing_info['current_bid'] or 0\n    assert now < listing_info['end_date'], 'Auction has ended.'\n    assert now > listing_info['start_date'], 'Auction has not stared.'\n    assert bid_amount > 0, 'Bid must be greater than zero.'\n    assert bid_amount > current_bid, f'Current bid of {current_bid} is higher!'\n    currency.transfer_from(main_account=ctx.caller, to=ctx.this, amount=\n        bid_amount)\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[uid, 'current_bid'] = bid_amount\n    __S[uid, 'current_winner'] = ctx.caller\n"
            },
            {
                "key": "con_pixel_frames_auction.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_auction.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        16,
                        9,
                        16,
                        35,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction.metadata:operator",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_auction_v0_1.S:thing_master_contract",
                "value": "con_pixel_frames_master_v0_1"
            },
            {
                "key": "con_pixel_frames_auction_v0_1.__code__",
                "value": "import currency\nI = importlib\n__Thing_Info = ForeignHash(foreign_contract='con_pixel_frames',\n    foreign_name='S', contract='con_pixel_frames_auction_v0_1', name=\n    'Thing_Info')\n__S = Hash(default_value=None, contract='con_pixel_frames_auction_v0_1',\n    name='S')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_auction_v0_1',\n    name='metadata')\n\n\ndef ____():\n    __S['thing_master_contract'] = 'con_pixel_frames_master_v0_1'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_pixel_frames_auction_v0_1')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_auction_v0_1')\ndef operator_transfer_thing(uid: str, new_owner: str):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer things from contract.'\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=uid, new_owner=new_owner)\n    __S[uid] = False\n\n\n@__export('con_pixel_frames_auction_v0_1')\ndef operator_transfer_currency(amount: str, to: float):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only auction operator can transfer currency from contract.'\n    currency.transfer(amount=amount, to=to)\n\n\ndef __get_listing_info(uid: str):\n    listing_info = __S[uid]\n    assert listing_info is not None, \"Listing doesn't exist!\"\n    return {'start_date': __S[uid, 'start_date'], 'end_date': __S[uid,\n        'end_date'], 'current_owner': __S[uid, 'current_owner'], 'uid': __S\n        [uid, 'uid'], 'reserve_price': __S[uid, 'reserve_price'],\n        'current_bid': __S[uid, 'current_bid'], 'current_winner': __S[uid,\n        'current_winner'], 'royalty_percent': __S[uid, 'royalty_percent'],\n        'creator': __S[uid, 'creator']}\n\n\n@__export('con_pixel_frames_auction_v0_1')\ndef auction_thing(uid: str, reserve_price: float, start_date: datetime.\n    datetime, end_date: datetime.datetime):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer_from(uid=uid, to=ctx.this, main_account=\n        ctx.caller)\n    assert not __S[uid], 'Auction has already started!'\n    assert end_date > now, 'end_date is in the past'\n    assert reserve_price >= 0, 'reserve_price cannot be less than 0'\n    __S[uid, 'start_date'] = start_date\n    __S[uid, 'end_date'] = end_date\n    __S[uid, 'current_owner'] = ctx.caller\n    __S[uid, 'uid'] = uid\n    __S[uid, 'reserve_price'] = reserve_price\n    __S[uid, 'current_bid'] = None\n    __S[uid, 'current_winner'] = ''\n    __S[uid, 'royalty_percent'] = __Thing_Info[uid, 'meta', 'royalty_percent']\n    __S[uid, 'creator'] = __Thing_Info[uid, 'creator']\n    __S[uid] = True\n\n\n@__export('con_pixel_frames_auction_v0_1')\ndef end_auction(uid: str, end_early: bool):\n    listing_info = __get_listing_info(uid=uid)\n    if end_early:\n        assert listing_info['current_owner'] == ctx.caller or __metadata[\n            'operator'\n            ] == ctx.caller, 'Only thing owner or auction operator can end the auction early!'\n        if now < listing_info['start_date']:\n            __process_auction_result_no_winner(listing_info)\n        elif (listing_info['current_bid'] or -1) < listing_info['reserve_price'\n            ]:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            assert False, 'Cannot end early. Auction started or reserve has been met.'\n    else:\n        assert now > listing_info['end_date'], 'Auction is still pending!'\n        if listing_info['current_bid'] == None or listing_info['current_bid'\n            ] < listing_info['reserve_price']:\n            __process_auction_result_no_winner(listing_info)\n        else:\n            __process_auction_result(listing_info)\n\n\ndef __process_auction_result_no_winner(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_owner'])\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[listing_info['uid']] = False\n\n\ndef __process_auction_result(listing_info):\n    thing_master_contract = I.import_module(__S['thing_master_contract'])\n    thing_master_contract.transfer(uid=listing_info['uid'], new_owner=\n        listing_info['current_winner'])\n    royalty_percent = listing_info['royalty_percent']\n    if royalty_percent > 0:\n        royalty_amount = listing_info['current_bid'] * (royalty_percent / 100)\n        net_amount = listing_info['current_bid'] - royalty_amount\n        currency.transfer(to=listing_info['creator'], amount=royalty_amount)\n    else:\n        net_amount = listing_info['current_bid']\n    currency.transfer(to=listing_info['current_owner'], amount=net_amount)\n    __S[listing_info['uid']] = False\n\n\n@__export('con_pixel_frames_auction_v0_1')\ndef bid(uid: str, bid_amount: float):\n    listing_info = __get_listing_info(uid=uid)\n    current_bid = listing_info['current_bid'] or 0\n    assert now < listing_info['end_date'], 'Auction has ended.'\n    assert now > listing_info['start_date'], 'Auction has not stared.'\n    assert bid_amount > 0, 'Bid must be greater than zero.'\n    assert bid_amount > current_bid, f'Current bid of {current_bid} is higher!'\n    currency.transfer_from(main_account=ctx.caller, to=ctx.this, amount=\n        bid_amount)\n    if listing_info['current_winner'] != '':\n        currency.transfer(to=listing_info['current_winner'], amount=\n            listing_info['current_bid'])\n    __S[uid, 'current_bid'] = bid_amount\n    __S[uid, 'current_winner'] = ctx.caller\n"
            },
            {
                "key": "con_pixel_frames_auction_v0_1.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_auction_v0_1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        16,
                        10,
                        55,
                        53,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_auction_v0_1.metadata:operator",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_info.__code__",
                "value": "__S = Hash(default_value='', contract='con_pixel_frames_info', name='S')\n\n\n@__export('con_pixel_frames_info')\ndef add_thing(thing_string: str, name: str, description: str, meta: dict,\n    creator: str):\n    __enforce_thing_standards(thing_string, name, description, meta)\n    uid = hashlib.sha256(thing_string)\n    assert not __S[uid], thing_string + ' already exists'\n    names_uid = hashlib.sha256(name.lower().replace(' ', ''))\n    assert not __S['names', names_uid\n        ], 'A form of this name already belongs to ' + __S['names', names_uid]\n    __S['names', names_uid] = uid\n    __custom_string_validations(thing_string, meta['num_of_frames'])\n    __S[uid] = ['thing', 'type', 'name', 'description', 'owner', 'creator',\n        'likes', 'price:amount', 'price:hold', 'meta_items']\n    __S[uid, 'thing'] = thing_string\n    __S[uid, 'type'] = 'text/plain'\n    __S[uid, 'name'] = name\n    __S[uid, 'description'] = description\n    __S[uid, 'owner'] = creator\n    __S[uid, 'creator'] = creator\n    __S[uid, 'likes'] = 0\n    __S[uid, 'price', 'amount'] = 0\n    __S[uid, 'meta_items'] = ['speed', 'num_of_frames', 'royalty_percent']\n    __S[uid, 'meta', 'speed'] = meta['speed']\n    __S[uid, 'meta', 'num_of_frames'] = meta['num_of_frames']\n    __S[uid, 'meta', 'royalty_percent'] = meta['royalty_percent']\n    return uid\n\n\ndef __enforce_thing_standards(thing_string: str, name: str, description:\n    str, meta: dict):\n    assert len(thing_string) > 0, 'Thing string cannot be empty.'\n    assert len(name) > 0, 'No Name provided.'\n    assert len(name) <= 25, 'Name too long (25 chars max).'\n    assert len(description) > 0, 'No description provided.'\n    assert len(description) <= 128, 'Description too long (128 chars max).'\n    __custom_meta_validations(meta)\n\n\ndef __custom_string_validations(thing_string: str, num_of_frames: int):\n    assert num_of_frames >= 1 and num_of_frames <= 8, 'num_of_frames value ' + str(\n        num_of_frames) + ' is out of range (1-4).'\n    assert len(thing_string\n        ) % num_of_frames == 0, 'num_of_frames value is invalid.'\n    assert len(thing_string\n        ) / num_of_frames == 625, 'Frames Data is Invalid, must be 625 pixels/frame.'\n    __assertPixelValues(thing_string)\n\n\ndef __assertPixelValues(thing_string):\n    for pixel in thing_string:\n        assert (ord(pixel) >= 65 and ord(pixel) <= 122) and ord(pixel\n            ) != 92, 'Frames Data contains invalid pixel {}.'.format(pixel)\n\n\ndef __custom_meta_validations(meta):\n    assert 'speed' in meta, \"Missing meta value 'speed' (int).\"\n    assert isinstance(meta['speed'], int), 'Speed value is not an integer.'\n    assert meta['speed'] >= 100 and meta['speed'\n        ] <= 2000, 'Speed value ' + str(meta['speed']\n        ) + ' is out of range (100ms-2000ms).'\n    assert 'num_of_frames' in meta, \"Missing meta value 'num_of_frames' (int).\"\n    assert isinstance(meta['num_of_frames'], int\n        ), 'num_of_frames value is not an integer.'\n    assert 'royalty_percent' in meta, \"Missing meta value 'royalty_percent' (int).\"\n    assert isinstance(meta['royalty_percent'], int\n        ), 'royalty_percent value is not an integer.'\n    assert meta['royalty_percent'] >= 0 and meta['royalty_percent'\n        ] <= 100, 'royalty_percent value ' + str(meta['royalty_percent']\n        ) + ' is out of range (0-100).'\n\n\n@__export('con_pixel_frames_info')\ndef thing_exists(thing_string: str):\n    uid = hashlib.sha256(thing_string)\n    return __S[uid]\n\n\n@__export('con_pixel_frames_info')\ndef get_owner(uid: str):\n    return __S[uid, 'owner']\n\n\n@__export('con_pixel_frames_info')\ndef get_creator(uid: str):\n    return __S[uid, 'creator']\n\n\n@__export('con_pixel_frames_info')\ndef set_price(uid: str, amount: float, hold: str):\n    assert amount >= 0, 'Cannot set a negative price'\n    __S[uid, 'price', 'amount'] = amount\n    if not hold == None:\n        __S[uid, 'price', 'hold'] = hold\n\n\n@__export('con_pixel_frames_info')\ndef get_price_amount(uid: str):\n    return __S[uid, 'price', 'amount']\n\n\n@__export('con_pixel_frames_info')\ndef get_royalty_amount(uid: str):\n    return __S[uid, 'meta', 'royalty_percent']\n\n\n@__export('con_pixel_frames_info')\ndef get_price_hold(uid: str):\n    return __S[uid, 'price', 'hold']\n\n\n@__export('con_pixel_frames_info')\ndef set_owner(uid: str, owner: str):\n    __S[uid, 'owner'] = owner\n\n\n@__export('con_pixel_frames_info')\ndef like_thing(uid: str):\n    likes = __S[uid, 'likes']\n    __S[uid, 'likes'] = likes + 1\n\n\n@__export('con_pixel_frames_info')\ndef set_proof(uid: str, code: str):\n    __S[uid, 'proof'] = code\n"
            },
            {
                "key": "con_pixel_frames_info.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_info.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        15,
                        13,
                        7,
                        10,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:creator",
                "value": "5fa1b314468832fb9d391e8af756140e85325a565d8b411ae2f2001d37c30ef4"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:description",
                "value": "cool cool pixel"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:name",
                "value": "cool_pixel"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:owner",
                "value": "5fa1b314468832fb9d391e8af756140e85325a565d8b411ae2f2001d37c30ef4"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:thing",
                "value
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_1.S:names:ffe8608b087fdca776bb71be3f020c61cf6b21fd41e73ad3eda66e3261fb9789",
                "value": "c3361632d6a205715dca150fc09c6219c897ec2420d370740e23e6be548088ab"
            },
            {
                "key": "con_pixel_frames_info_v0_1.__code__",
                "value": "__S = Hash(default_value='', contract='con_pixel_frames_info_v0_1', name='S')\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef add_thing(thing_string: str, name: str, description: str, meta: dict,\n    creator: str):\n    __enforce_thing_standards(thing_string, name, description, meta)\n    uid = hashlib.sha256(thing_string)\n    assert not __S[uid], thing_string + ' already exists'\n    names_uid = hashlib.sha256(name.lower().replace(' ', ''))\n    assert not __S['names', names_uid\n        ], 'A form of this name already belongs to ' + __S['names', names_uid]\n    __S['names', names_uid] = uid\n    __custom_string_validations(thing_string, meta['num_of_frames'])\n    __S[uid] = ['thing', 'type', 'name', 'description', 'owner', 'creator',\n        'likes', 'price:amount', 'price:hold', 'meta_items']\n    __S[uid, 'thing'] = thing_string\n    __S[uid, 'type'] = 'text/plain'\n    __S[uid, 'name'] = name\n    __S[uid, 'description'] = description\n    __S[uid, 'owner'] = creator\n    __S[uid, 'creator'] = creator\n    __S[uid, 'likes'] = 0\n    __S[uid, 'price', 'amount'] = 0\n    __S[uid, 'meta_items'] = ['speed', 'num_of_frames', 'royalty_percent']\n    __S[uid, 'meta', 'speed'] = meta['speed']\n    __S[uid, 'meta', 'num_of_frames'] = meta['num_of_frames']\n    __S[uid, 'meta', 'royalty_percent'] = meta['royalty_percent']\n    return uid\n\n\ndef __enforce_thing_standards(thing_string: str, name: str, description:\n    str, meta: dict):\n    assert len(thing_string) > 0, 'Thing string cannot be empty.'\n    assert len(name) > 0, 'No Name provided.'\n    assert len(name) <= 25, 'Name too long (25 chars max).'\n    assert len(description) > 0, 'No description provided.'\n    assert len(description) <= 128, 'Description too long (128 chars max).'\n    __custom_meta_validations(meta)\n\n\ndef __custom_string_validations(thing_string: str, num_of_frames: int):\n    assert num_of_frames >= 1 and num_of_frames <= 8, 'num_of_frames value ' + str(\n        num_of_frames) + ' is out of range (1-4).'\n    assert len(thing_string\n        ) % num_of_frames == 0, 'num_of_frames value is invalid.'\n    assert len(thing_string\n        ) / num_of_frames == 625, 'Frames Data is Invalid, must be 625 pixels/frame.'\n    __assertPixelValues(thing_string)\n\n\ndef __assertPixelValues(thing_string):\n    for pixel in thing_string:\n        assert (ord(pixel) >= 65 and ord(pixel) <= 122) and ord(pixel\n            ) != 92, 'Frames Data contains invalid pixel {}.'.format(pixel)\n\n\ndef __custom_meta_validations(meta):\n    assert 'speed' in meta, \"Missing meta value 'speed' (int).\"\n    assert isinstance(meta['speed'], int), 'Speed value is not an integer.'\n    assert meta['speed'] >= 100 and meta['speed'\n        ] <= 2000, 'Speed value ' + str(meta['speed']\n        ) + ' is out of range (100ms-2000ms).'\n    assert 'num_of_frames' in meta, \"Missing meta value 'num_of_frames' (int).\"\n    assert isinstance(meta['num_of_frames'], int\n        ), 'num_of_frames value is not an integer.'\n    assert 'royalty_percent' in meta, \"Missing meta value 'royalty_percent' (int).\"\n    assert isinstance(meta['royalty_percent'], int\n        ), 'royalty_percent value is not an integer.'\n    assert meta['royalty_percent'] >= 0 and meta['royalty_percent'\n        ] <= 100, 'royalty_percent value ' + str(meta['royalty_percent']\n        ) + ' is out of range (0-100).'\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef thing_exists(thing_string: str):\n    uid = hashlib.sha256(thing_string)\n    return __S[uid]\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef get_owner(uid: str):\n    return __S[uid, 'owner']\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef get_creator(uid: str):\n    return __S[uid, 'creator']\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef set_price(uid: str, amount: float, hold: str):\n    assert amount >= 0, 'Cannot set a negative price'\n    __S[uid, 'price', 'amount'] = amount\n    if not hold == None:\n        __S[uid, 'price', 'hold'] = hold\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef get_price_amount(uid: str):\n    return __S[uid, 'price', 'amount']\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef get_royalty_amount(uid: str):\n    return __S[uid, 'meta', 'royalty_percent']\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef get_price_hold(uid: str):\n    return __S[uid, 'price', 'hold']\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef set_owner(uid: str, owner: str):\n    __S[uid, 'owner'] = owner\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef like_thing(uid: str):\n    likes = __S[uid, 'likes']\n    __S[uid, 'likes'] = likes + 1\n\n\n@__export('con_pixel_frames_info_v0_1')\ndef set_proof(uid: str, code: str):\n    __S[uid, 'proof'] = code\n"
            },
            {
                "key": "con_pixel_frames_info_v0_1.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_info_v0_1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        16,
                        10,
                        55,
                        59,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        12,
                        53,
                        35,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:description",
                "value": "7777"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:likes",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:name",
                "value": "77"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:price:amount",
                "value": {
                    "__fixed__": "1111"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGGBBGBBBBBBBBBBBBBBBBBBBBGGGGGGBBBBBBBBBBBBBBBBBBBGGGGGGGBBBBBBBBBBBBBBGGGGGGGGGGGGBBBBBBBBBBBBBGGGGGGGGGGGBBBBBBBBBBBBBBGGGGGGGGBBBGGBBBBBBBBBBBBGGGGGGGGBBBBBBBBBBBBBBBBBGGGGGGGGGBBBBBBBBBBBBBBBBGGGGGGGGGGBBBBBBBBBBBBBBGGGGGGGGGGGGBBBBBBBBBBBBBBGGGGGGGGGGGBBBBBBBBBBBBBBBGGGGGGGBBBBBBBBBBBBBBBBBBBBGGGGBBBBBBBBBBBBBBBBBBBBBBGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        13,
                        5,
                        42,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:description",
                "value": "12312312312"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:name",
                "value": "13123123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:price:amount",
                "value": {
                    "__fixed__": "123123"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBBBBBBABBBBBBBBBBBBBBBBBBBBBBBBBABBBBBBBBBBBBBBBBBBBBBBBBBABBBBBAABBBBBBBBBBBBBBBBBBABBBBAAABBBBBBBBBBBBBBBBBBABBBABABBBBBBBBBBBBBBBBBBAABBABBABBBBBBBBBBBBBBBBBBAABABBBABBBBBBBBBBBBBBBBBBABABBBABBBBBBBBBBBBBBBBBBAABBBBABBBBBBBBBBBBBBBBBBBAABBBABBBBBBBBBBBBBBBBBBBAABBABBBBBBBBBBBBBBBBBBBBAAAABBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBABABBAABBBBBBBBBBBBBBAAAABBBBBAABBBBBBBBBBBBBAABBBBBBBBAAABBBBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBBBBAAABBBBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBBBBBBBBBBBBBBBAABBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        12,
                        51,
                        49,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:description",
                "value": "555"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:name",
                "value": "555"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:price:amount",
                "value": {
                    "__fixed__": "7777"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBBBBBGGBBBBBBBBBBBBBBBBBBBBBBBGBGBBBBBBBBBBBBBBBBBBBBBBGBBGGBBBBBBBBBBBBBBBBBBBBBGBGGBBBBBBBBBBBBBBBBBBGGBBBBGGBBBBBBBBBBBBBBGGGBGGGGBBGGGGBBBBBBBBBBBGGGGBBBGGGGGGBBBBBBBBBBBBGGGGGBBGBBGGGBBBBBBBBBBBBGGBGBGGBGGBBGGBBBBBBBBBBBGGBBGBBGGGGBBBBBBBBBBBBBBBGBBBGGBBGBBBBBBBBBBBBBBGGGGGGGBBBGGGBBBBBBBBBBBBGBGGGGGGGGGBGGBBBBBBBBBBGBBBGBBGBBBBBBBGGBBBBBBBBGGBBGGBGBBBBBBBBGGBBBBBBBBGGGBGGGBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        12,
                        52,
                        4,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:description",
                "value": "666"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:name",
                "value": "666"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:price:amount",
                "value": {
                    "__fixed__": "444"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBJBBBBBBBBBBBBBBBBBBBBBBBBJJBBBBBBBBBBBBBBBBBBBBBBJJBJBBBBBBBBBBBBBBBBBBBJJJBBBJBBBBBBBBBBBBBBBBBJBBJBBBBJJBBBBBBBBBBBBBBBJBBJBBBJJBBBBBBBBBBBBBBBBBBJBBBBJJBBBBBBBBBBBBBBBJBBJJBBJBJBBBBBBBBBBBBBBJBBJBBBJBBBBBBBBBBBBBBBBBBBBJBJJBBBJBBBBBBBBBBBBBBJJJJJJBBBBJBBBBBBBBBBBBJJBBJJJBBBBBBBBBBBBBBBBBBJBJBBJJBBBBBJBBBBBBBBBBBJBBJBBBJBBBBBJBBBBBBBBBBBJBBJBBBJBBBBJBBBBBBBBBBBBJJJBBBBJBBBJBBBBBBBBBBBBBBBJJBJJJJBJJBBBBBBBBBBBBBBBBBJBBJBBBBBBBBBBBBBBBBBBBBBBJJJBBBBBBBBBBBBBBBBBBBBBBBJJBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        12,
                        52,
                        21,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:description",
                "value": "1"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:name",
                "value": "1"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:price:amount",
                "value": {
                    "__fixed__": "12312312"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBGBBBBBBBBBBBBBBBBBBBBBGBBGGBBBBBBBBBBBBBBBBBBBBGGGBGGGBBBBBBBBBBBBBBBGGGGGGGGGGGBBBBBBBBBBBBBGGGGGGGGGGGGGBBBBBBBBBGGGGGGGGGGGGGGGGGBBBBBBBBGGGGGGGGGGGGGGGGGBBBBBBBBGGGGGGGGGGGGGGGGGGBBBBBBBGGGGGGGGGGGGGGGGGGBBBBBBBGGGGGGGGGGGGGGGGGGBBBBBBBGGGGGGGGGGGGGGGGGGBBBBBBBGGGGGGGGGGGGGGGGGGBBBBBBBGGGGGGGGGGGGGGGGGGBBBBBBBGGGGGGGGGGGGGGGGGGBBBBBBBGGBGGGGGGGGGGGGGGGBBBBBBBBBBBGGBGGGGGGGGGBBBBBBBBBBBBBBBBBGGGGGGBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        12,
                        51,
                        34,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:description",
                "value": "44"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:name",
                "value": "4"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:price:amount",
                "value": {
                    "__fixed__": "55551"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAABBBBBBBBBAABBBBBBBBBBBBBBAABBBBBBAAAABBBBBBBBBBBBBBBABABBABBBABBBBABBBBBBBBBBBBBAABBBBABBBABBBBBBBBBBBBBBBABABBBABABBBBBBBBBBBBBBBABBBABBAAABBBBBBBBBBBBBBABBBBAABAABBBBBBBBBBBBBBABBBBBBBAAABBBBBBBBBBBBBABBBBBBBBAAABBBBBBBBBBBBBABBBBBBBABBBBBBBBBBBBBBBABBBBBBBAABBBBBBBBBBBBBBABBBBBBBBABBBBBBBBBBBBBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        13,
                        13,
                        49,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:description",
                "value": "0"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:name",
                "value": "0"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:thing",
                "value": "BBBBBBBBBGBGBBGGBBBBBBBBBBBBBBBBBGBGBGBGBGBBBBBBBBBBBBBBBBGGGBGBGBBBBBBBBBBBBBGBBGGGGGBBGGGGBBBBBBBBBBBGGBGGGGGGGGGGBGBBBBBBBBBBBGGBGGBGGGBGGBBGBBBBBBBBBBGBGGGGGGGBGGBGBBBBBBBBBBGGGBBGBGGGBBGGGGBBBBBBBBBGGGGBGGGGGBBBGBBGBBBBBBBBGGGGGBGGBGGBGBGGGBBBBBBBBBBGGGBBGGBBGBBBBGGBBBBBBBBBGGGGGGGGGGBBBBGGBBBBBBBBBGGGBGBBGGBBBBGGGGBBBBBBBBGGGGGBBGBGBGBBBBGGBBBBBBBGGBGGGGGGGBGGGBGGGGBBBBGGGGGBBGGBBBBBBBBBBGGBBGGBGBBGGBGBBBBBBBBBBBBBBBBBBGGGBGGGBBBBBBBBBBBBBBBBBBBBGGGBGGBBBBBBBBBBBBBBBBBBBBGGGBGGBBBBBBBBBBBBBBBBBBBBGGGBGBBBBBBBBBBBBBBBBBBBBBBGGBGBBBBBBBBBBBBBBBBBBBBBBBGGGBBBBBBBBBBBBBBBBBBBBBBBGGGBBBBBBBBBBBBBBBBBBBBBBBGGBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        2,
                        6,
                        48,
                        31,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:creator",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:description",
                "value": "ssss"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:name",
                "value": "asdsad"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:owner",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:thing",
                "value": "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGVVGGGGGGGGGGGGGGGGGGGGGVVVVVVGGGGGGGGGGGGGGGGVVVVGGGGVVGGGGGGGGGGGGGGVVGGGGGGGGGVGGGGGGGGGGGVVVGGGGGGGGGGGVVGGGGGGGVVVGGGGGGGGGGGGGGVVVGGGGGVVVVVVVVVVVVVVVVVVVVVGGGGVGGGGGGGGGGGGGGGGGGGVGGGGVGGGGGGGGGGGGGGGGGGGVGGGGVGGGGGGGGGGGGGGGGGGGVGGGGVGGGGGGGGGGGGGGGGGGGVGGGGVGGGGGGGGGGGGGGGGGGGVGGGGGVVGGGGGGGGGGGGGGGGVVGGGGGVVGGGGGGGGGGGGGGGGVGGGGGGVVGGGGGGGGGGGGGGGGVGGGGGGVGGGGGGGGGGGGGGGGGVGGGGGGVGGGGGGGGGGGGGGGGGVGGGGGGVVVVVVVVVVVVVVVVVVVGGGGGGGGGGGGGGGGGGGGVVGVVGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        15,
                        28,
                        32,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:description",
                "value": "555"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:name",
                "value": "5555"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:price:amount",
                "value": {
                    "__fixed__": "124124141241"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBGGGGBBBBBBBBBBBBBBBBBBBGGGBGGBBBBBBBBBBBGGGGGBBBGBGGGGGBBBBBBBBBGGGGGBBBBBGBBBGGGBBBBBBBGGGGGGGBBBBGGBBBBGGBBBBBBGGGGGGGGBGGGGBBBBBGGBBBBGGGGGGGGGGGGGGBBBBBBBBBBBGGGGGGGGGGGGGBGGBBBBBBBBGGGGGGGGGGGBGBGBGBBBBBBBBGGGGGGGGGGGGBBGBGGBBBBBBBGGGGGGGGGGGGBBBGBGGGBBBBBGGGGGGGGGGGGBBBGBBBGBBBBGGGGGGGGGGGGBBBBGBBBGBBBBGGGBGGGGGGGGBBBBGBBBBBBBBBGBBGGBBGGGGGBBGGBBBBBBBBBGBBBBBBBBBBBGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        13,
                        0,
                        13,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:creator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:description",
                "value": "fire on match"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:name",
                "value": "match on fire"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:owner",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:price:amount",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBJBBBBBBBBBBBBBBBBBBBBBBBJJJBBBBBBBBBBBBBBBBBBBBBJJJJJBBBBBBBBBBBBBBBBBBBBJJSJJBBBBBBBBBBBBBBBBBBBBSSSSSBBBBBBBBBBBBBBBBBBBBBSSSBBBBBBBBBBBBBBBBBBBBBBSVSBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBBBBBBBBBBBBBBTBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        12,
                        54,
                        13,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:description",
                "value": "2342342"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:name",
                "value": "51342134"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:price:amount",
                "value": {
                    "__fixed__": "123123123"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGGBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBGGGBBBBBBBBBBBBBBBBGBBBBGGBBGBBBBBBBBBBBBBBBBGBGGBBBBBGGBBBBBBBBBBBBBBGGBBBBBBBGGGGGBBBBBBBBBBBGGBBBBBBGBBBGGBBBBBBBBBBGBGBBBBBBGBBBBGGGBBBBBBBBGBBGGGGGGGBBBBGBBGBBBBBBGBBBGGBBBGBGBBBBGBGBBBBBBGBBGBGBBGBBGBBBBBBBGBBBBBGBGBBBBBGBBBGBBBGBBGGBBBBGGGBBBGGGBBBBBBBGBBBGBBBBGGBBBBGGBBBBGBBBGBBBGBBBBGGBBBBBGBBBBBBBBGBBGBBBBBBGGBBBBBBBBBBBBBGGGBBBBBBBBGGBBBBBBBBBBBGGBBBBBBBBBBBGGGGGGBGGGBGGBBBBBBBBBBBBBBGGBBBBBGGBBBBBBBBBBBBBBBBBBGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        13,
                        13,
                        18,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:description",
                "value": "123123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:name",
                "value": "123123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:price:amount",
                "value": {
                    "__fixed__": "12312312312"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:thing",
                "value": "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBGGBBBBBBBBBBBBBBBBGBBBBBGGBBBBBBBBBBBBBBBBBGBBBBBGBBBBBBBBBBBBBBBBBGGBBBBGBBBBBBBBBBBBBBBBBGGGGBBGBBBBBBBBBBBBBBBBBBGGGGBGGBBBBBBBBBBBBBBBBBBBGGGGGBBBBBBBBBBBBBBBBBBBBGGGGGBBBBBBBBBBBBBBBBBBGGGGGGGGBBBBBBBBBBBBBBBBBGGGGGGGGGBBBBBBBBBBBBBBBBGGGGGGGGGGBBBBBBBBBBBBBGGGGGGGGGGGGGBBBBBBBBBBBBBGGGGGGGGBGBGBBBBBBBBBBBBBBGGGGGGGGBBBBBBBBBBBBBBBBBBGGGGGGGGBBBBBBBBBBBBBBBBBBGGGGGGGBBBBBBBBBBBBBBBBBBBGGGGGGBBBBBBBBBBBBBBBBBBBBGGGGGGBBBBBBBBBBBBBBBBBBBBGGGGBBBBBBBBBBBBBBBBBBBBBBGGGGBBBBBBBBBBBBBBBBBBBBBBGGGBBBBBB"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d",
                "value": [
                    "thing",
                    "type",
                    "name",
                    "description",
                    "owner",
                    "creator",
                    "likes",
                    "price:amount",
                    "price:hold",
                    "meta_items"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:created",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        12,
                        50,
                        14,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:creator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:description",
                "value": "123123123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:likes",
                "value": 0
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:meta:num_of_frames",
                "value": 1
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:meta:royalty_percent",
                "value": 5
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:meta:speed",
                "value": 500
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:meta_items",
                "value": [
                    "speed",
                    "num_of_frames",
                    "royalty_percent"
                ]
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:name",
                "value": "123123123"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:owner",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:price:amount",
                "value": {
                    "__fixed__": "11111"
                }
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:price:hold",
                "value": ""
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:thing",
                "value": "TSSSTSBBSSTTSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSBSTSBSSSSSTSTSSBSSSSSSSSTSSSSSSSS`SSSSTTSSSSSTSBBBB````S`S``SYSSS`S`SSSSSSBSSSSSSSSYS`SSS`SSSSSSSBBB````SBBSSSSBSYYS`SBSSTBBBSSBSSSSSSSSJSGYS`SSSSSSSB`SBSSS`SGGS`SSSBSTBTSSOSS`SBSB`SSSSSSSSSS`SSSSSOSSSASSSSSSSYSSSSSSSSSSSSSSSSASAASSASSSSSAASSSSSSSSSSSASSSSSSSSSSAASSSSSSSSSSSAAAAAAASSSSASSAAASSSSSSSSASSSSSSASAAAAAAASSSSSSSSSAASSSSSSSAAAAAASSSSSSSSSSAASSSSASSASSSAAAAASSSSSSSSAASSSSSSSSSAASASSAASSSSSSSASSSSSSSSAAAAAAASSSSSSSSSAAAAAAAAAASSASSSSSSSSSSSSSAAAAASSSSSAASSSSSSSSSSSSSSSSSSSSSSSASBSSSSSSSSSSSSSBSSSSSSSSSSSBSBSBSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSBS"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d:type",
                "value": "text/plain"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:048578ceafb2e5d966d4b5514603f295d189e7f35e25ac3996a63e6500814c12",
                "value": "16db3b33f6852e84db7ecd548fc6b375059776a9b54c80bb4c0db6c5ba84dbea"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:12e84da630211bc7682e6f669e4608133869b6ea5436bcb5fac208d24ba27169",
                "value": "aded799648b9d8b71085d8df868180ac40d96bf5e677217092ec76cf410e311a"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:2a2564090f6911018cb487564e448eacf0de05a46e409434f4f0568d37f5fcff",
                "value": "cf2aa5347515f44bc640b73307817b437238005335b3378d39e229c098fb2878"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:4b227777d4dd1fc61c6f884f48641d02b4d121d3fd328cb08b5531fcacdabf8a",
                "value": "4d29b87de51fd13cf856726b57719a4c0cdd98c3d6641ef17be0ce62f24de0df"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:50ad41624c25e493aa1dc7f4ab32bdc5a3b0b78ecc35b539936e3fea7c565af7",
                "value": "71ef0b5bbc9ebe0158802318374ede1250485861919178487e0cbcd3b3307371"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:50e721e49c013f00c62cf59f2163542a9d8df02464efeb615d31051b0fddc326",
                "value": "091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:5feceb66ffc86f38d952786c6d696c79c2dbc239dd4e91b46729d73a27fb57e9",
                "value": "528fbee34cd0a36b5922e597fe3ad27a589592f10d66f9637c90b511ead5ca72"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b",
                "value": "4bf89585e7e534bce6f9d3963f3b269bd8e3206743bb64585ab7cfbc420d2838"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:70801eb4bac16df84658a7c0e49cbbf3b42d20c29d1a7f809f7cf6d31c76f2c2",
                "value": "a92c214f31dae9233203e9f295ff8070e1f60071e36c113892efdb7e0b97e038"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:7f05d7b59df33f0ca9b77d7d43c6e087ca1755c70711181fe9509cf685f59ed7",
                "value": "eaa3c5985c71c865567083cf9df95b91bfc213785bafb13dc729cf106b3e0b5c"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:91a73fd806ab2c005c13b4dc19130a884e909dea3f72d46e30266fe1a1f588d8",
                "value": "18bcb7c5ae87d62b6869b5e8f6bad3dcb20a1cfdecaea7df63788e317a1187f8"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:932f3c1b56257ce8539ac269d7aab42550dacf8818d075f0bdf1990562aae3ef",
                "value": "f2962f7be6f82f3b70a8213b85d207d0f6535e77f8e3d781fe4c0b328227c69d"
            },
            {
                "key": "con_pixel_frames_info_v0_3.S:names:c7e616822f366fb1b5e0756af498cc11d2c0862edcb32ca65882f622ff39de1b",
                "value": "1f2605863f8620b176a459d39b31b875ef7a096fd5261b494d31ae828e42e86a"
            },
            {
                "key": "con_pixel_frames_info_v0_3.__code__",
                "value": "__S = Hash(default_value='', contract='con_pixel_frames_info_v0_3', name='S')\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef add_thing(thing_string: str, name: str, description: str, meta: dict,\n    creator: str):\n    __enforce_thing_standards(thing_string, name, description, meta)\n    uid = hashlib.sha256(thing_string)\n    assert not __S[uid], thing_string + ' already exists'\n    names_uid = hashlib.sha256(name.lower().replace(' ', ''))\n    assert not __S['names', names_uid\n        ], 'A form of this name already belongs to ' + __S['names', names_uid]\n    __S['names', names_uid] = uid\n    __custom_string_validations(thing_string, meta['num_of_frames'])\n    __S[uid] = ['thing', 'type', 'name', 'description', 'owner', 'creator',\n        'likes', 'price:amount', 'price:hold', 'meta_items']\n    __S[uid, 'thing'] = thing_string\n    __S[uid, 'type'] = 'text/plain'\n    __S[uid, 'name'] = name\n    __S[uid, 'description'] = description\n    __S[uid, 'owner'] = creator\n    __S[uid, 'creator'] = creator\n    __S[uid, 'created'] = now\n    __S[uid, 'likes'] = 0\n    __S[uid, 'price', 'amount'] = 0\n    __S[uid, 'meta_items'] = ['speed', 'num_of_frames', 'royalty_percent']\n    __S[uid, 'meta', 'speed'] = meta['speed']\n    __S[uid, 'meta', 'num_of_frames'] = meta['num_of_frames']\n    __S[uid, 'meta', 'royalty_percent'] = meta['royalty_percent']\n    return uid\n\n\ndef __enforce_thing_standards(thing_string: str, name: str, description:\n    str, meta: dict):\n    assert len(thing_string) > 0, 'Thing string cannot be empty.'\n    assert len(name) > 0, 'No Name provided.'\n    assert len(name) <= 25, 'Name too long (25 chars max).'\n    assert len(description) > 0, 'No description provided.'\n    assert len(description) <= 128, 'Description too long (128 chars max).'\n    __custom_meta_validations(meta)\n\n\ndef __custom_string_validations(thing_string: str, num_of_frames: int):\n    assert num_of_frames >= 1 and num_of_frames <= 8, 'num_of_frames value ' + str(\n        num_of_frames) + ' is out of range (1-4).'\n    assert len(thing_string\n        ) % num_of_frames == 0, 'num_of_frames value is invalid.'\n    assert len(thing_string\n        ) / num_of_frames == 625, 'Frames Data is Invalid, must be 625 pixels/frame.'\n    __assertPixelValues(thing_string)\n\n\ndef __assertPixelValues(thing_string):\n    for pixel in thing_string:\n        assert (ord(pixel) >= 65 and ord(pixel) <= 122) and ord(pixel\n            ) != 92, 'Frames Data contains invalid pixel {}.'.format(pixel)\n\n\ndef __custom_meta_validations(meta):\n    assert 'speed' in meta, \"Missing meta value 'speed' (int).\"\n    assert isinstance(meta['speed'], int), 'Speed value is not an integer.'\n    assert meta['speed'] >= 100 and meta['speed'\n        ] <= 2000, 'Speed value ' + str(meta['speed']\n        ) + ' is out of range (100ms-2000ms).'\n    assert 'num_of_frames' in meta, \"Missing meta value 'num_of_frames' (int).\"\n    assert isinstance(meta['num_of_frames'], int\n        ), 'num_of_frames value is not an integer.'\n    assert 'royalty_percent' in meta, \"Missing meta value 'royalty_percent' (int).\"\n    assert isinstance(meta['royalty_percent'], int\n        ), 'royalty_percent value is not an integer.'\n    assert meta['royalty_percent'] >= 0 and meta['royalty_percent'\n        ] <= 100, 'royalty_percent value ' + str(meta['royalty_percent']\n        ) + ' is out of range (0-100).'\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef thing_exists(thing_string: str):\n    uid = hashlib.sha256(thing_string)\n    return __S[uid]\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef get_owner(uid: str):\n    return __S[uid, 'owner']\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef get_creator(uid: str):\n    return __S[uid, 'creator']\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef set_price(uid: str, amount: float, hold: str):\n    assert amount >= 0, 'Cannot set a negative price'\n    __S[uid, 'price', 'amount'] = amount\n    if not hold == None:\n        __S[uid, 'price', 'hold'] = hold\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef get_price_amount(uid: str):\n    return __S[uid, 'price', 'amount']\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef get_royalty_amount(uid: str):\n    return __S[uid, 'meta', 'royalty_percent']\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef get_price_hold(uid: str):\n    return __S[uid, 'price', 'hold']\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef set_owner(uid: str, owner: str):\n    __S[uid, 'owner'] = owner\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef like_thing(uid: str):\n    likes = __S[uid, 'likes']\n    __S[uid, 'likes'] = likes + 1\n\n\n@__export('con_pixel_frames_info_v0_3')\ndef set_proof(uid: str, code: str):\n    __S[uid, 'proof'] = code\n"
            },
            {
                "key": "con_pixel_frames_info_v0_3.__developer__",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_info_v0_3.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        11,
                        52,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_master.S:thing_info_contract",
                "value": "con_pixel_frames"
            },
            {
                "key": "con_pixel_frames_master.__code__",
                "value": "import currency\nI = importlib\n__S = Hash(default_value='', contract='con_pixel_frames_master', name='S')\n__balances = Hash(default_value=0, contract='con_pixel_frames_master', name\n    ='balances')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_master', name\n    ='metadata')\n\n\ndef ____():\n    __S['thing_info_contract'] = 'con_pixel_frames'\n    __metadata['operator'] = ctx.caller\n    __metadata['things_name'] = 'Pixel Frames Test 2'\n    __metadata['things_description'] = (\n        'Create, Own and Sell unique pixel animations on the Lamden Blockchain!'\n        )\n\n\n@__export('con_pixel_frames_master')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_master')\ndef create_thing(thing_string: str, name: str, description: str, meta: dict={}\n    ):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    sender = ctx.caller\n    thing_uid = thing_info.add_thing(thing_string, name, description, meta,\n        sender)\n    __add_to_balance(sender)\n    return thing_uid\n\n\n@__export('con_pixel_frames_master')\ndef buy_thing(uid: str):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    sender = ctx.caller\n    owner = thing_info.get_owner(uid)\n    creator = thing_info.get_creator(uid)\n    __assert_already_owned(uid, sender)\n    price_amount = thing_info.get_price_amount(uid)\n    royalty_percent = thing_info.get_royalty_amount(uid)\n    assert price_amount, uid + ' is not for sale'\n    assert price_amount > 0, uid + ' is not for sale'\n    price_hold = thing_info.get_price_hold(uid)\n    if price_hold != '':\n        assert sender == price_hold, uid + ' is being held for ' + price_hold\n    if royalty_percent > 0:\n        royalty_amount = price_amount * (royalty_percent / 100)\n        net_amount = price_amount - royalty_amount\n        currency.transfer_from(royalty_amount, creator, sender)\n    else:\n        net_amount = price_amount\n    currency.transfer_from(net_amount, owner, sender)\n    __transfer_ownership(uid, sender)\n\n\n@__export('con_pixel_frames_master')\ndef sell_thing(uid: str, amount: float):\n    __assert_ownership(uid, ctx.caller)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_price(uid, amount, '')\n\n\n@__export('con_pixel_frames_master')\ndef sell_thing_to(uid: str, amount: float, hold: str):\n    __assert_ownership(uid, ctx.caller)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_price(uid, amount, hold)\n\n\n@__export('con_pixel_frames_master')\ndef transfer(uid: str, new_owner: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    __assert_already_owned(uid, new_owner)\n    __transfer_ownership(uid, new_owner)\n\n\n@__export('con_pixel_frames_master')\ndef approve(uid: str, to: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    __balances[sender, uid, to] = True\n\n\n@__export('con_pixel_frames_master')\ndef revoke(uid: str, to: str):\n    __balances[ctx.caller, uid, to] = None\n\n\n@__export('con_pixel_frames_master')\ndef transfer_from(uid: str, to: str, main_account: str):\n    sender = ctx.caller\n    assert __balances[main_account, uid, sender\n        ], \"You have not been given approval to transfer this user's item.\"\n    __assert_ownership(uid, main_account)\n    __assert_already_owned(uid, to)\n    __transfer_ownership(uid, to)\n    __balances[main_account, uid, sender] = None\n\n\n@__export('con_pixel_frames_master')\ndef like_thing(uid: str):\n    sender = ctx.caller\n    assert __S['liked', uid, sender] == '', sender + ' already liked ' + uid\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.like_thing(uid)\n    __S['liked', uid, sender] = True\n\n\n@__export('con_pixel_frames_master')\ndef prove_ownership(uid: str, code: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_proof(uid, code)\n\n\ndef __assert_ownership(uid: str, sender):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    owner = thing_info.get_owner(uid)\n    assert owner == sender, uid + ' not owned by ' + sender\n\n\ndef __assert_already_owned(uid: str, sender):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    owner = thing_info.get_owner(uid)\n    assert owner != sender, uid + ' already owned by ' + sender\n\n\ndef __transfer_ownership(uid: str, new_owner: str):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    old_owner = thing_info.get_owner(uid)\n    thing_info.set_owner(uid, new_owner)\n    if thing_info.get_price_amount(uid) > 0:\n        thing_info.set_price(uid, 0, '')\n    __add_to_balance(new_owner)\n    __subtract_from_balance(old_owner)\n\n\ndef __add_to_balance(holder: str):\n    if __balances[holder] is None:\n        __balances[holder] = 1\n    else:\n        __balances[holder] = __balances[holder] + 1\n\n\ndef __subtract_from_balance(holder: str):\n    if __balances[holder] is None:\n        __balances[holder] = 0\n    else:\n        __balances[holder] = __balances[holder] - 1\n"
            },
            {
                "key": "con_pixel_frames_master.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_master.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        16,
                        9,
                        16,
                        41,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_master.metadata:operator",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_master.metadata:things_description",
                "value": "Create, Own and Sell unique pixel animations on the Lamden Blockchain!"
            },
            {
                "key": "con_pixel_frames_master.metadata:things_name",
                "value": "Pixel Frames Test 2"
            },
            {
                "key": "con_pixel_frames_master_v0_1.S:thing_info_contract",
                "value": "con_pixel_frames_info_v0_1"
            },
            {
                "key": "con_pixel_frames_master_v0_1.__code__",
                "value": "import currency\nI = importlib\n__S = Hash(default_value='', contract='con_pixel_frames_master_v0_1', name='S')\n__balances = Hash(default_value=0, contract='con_pixel_frames_master_v0_1',\n    name='balances')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_master_v0_1',\n    name='metadata')\n\n\ndef ____():\n    __S['thing_info_contract'] = 'con_pixel_frames_info_v0_1'\n    __metadata['operator'] = ctx.caller\n    __metadata['things_name'] = 'Pixel Frames Test 2'\n    __metadata['things_description'] = (\n        'Create, Own and Sell unique pixel animations on the Lamden Blockchain!'\n        )\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef create_thing(thing_string: str, name: str, description: str, meta: dict={}\n    ):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    sender = ctx.caller\n    thing_uid = thing_info.add_thing(thing_string, name, description, meta,\n        sender)\n    __add_to_balance(sender)\n    return thing_uid\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef buy_thing(uid: str):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    sender = ctx.caller\n    owner = thing_info.get_owner(uid)\n    creator = thing_info.get_creator(uid)\n    __assert_already_owned(uid, sender)\n    price_amount = thing_info.get_price_amount(uid)\n    royalty_percent = thing_info.get_royalty_amount(uid)\n    assert price_amount, uid + ' is not for sale'\n    assert price_amount > 0, uid + ' is not for sale'\n    price_hold = thing_info.get_price_hold(uid)\n    if price_hold != '':\n        assert sender == price_hold, uid + ' is being held for ' + price_hold\n    if royalty_percent > 0:\n        royalty_amount = price_amount * (royalty_percent / 100)\n        net_amount = price_amount - royalty_amount\n        currency.transfer_from(royalty_amount, creator, sender)\n    else:\n        net_amount = price_amount\n    currency.transfer_from(net_amount, owner, sender)\n    __transfer_ownership(uid, sender)\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef sell_thing(uid: str, amount: float):\n    __assert_ownership(uid, ctx.caller)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_price(uid, amount, '')\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef sell_thing_to(uid: str, amount: float, hold: str):\n    __assert_ownership(uid, ctx.caller)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_price(uid, amount, hold)\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef transfer(uid: str, new_owner: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    __assert_already_owned(uid, new_owner)\n    __transfer_ownership(uid, new_owner)\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef approve(uid: str, to: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    __balances[sender, uid, to] = True\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef revoke(uid: str, to: str):\n    __balances[ctx.caller, uid, to] = None\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef transfer_from(uid: str, to: str, main_account: str):\n    sender = ctx.caller\n    assert __balances[main_account, uid, sender\n        ], \"You have not been given approval to transfer this user's item.\"\n    __assert_ownership(uid, main_account)\n    __assert_already_owned(uid, to)\n    __transfer_ownership(uid, to)\n    __balances[main_account, uid, sender] = None\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef like_thing(uid: str):\n    sender = ctx.caller\n    assert __S['liked', uid, sender] == '', sender + ' already liked ' + uid\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.like_thing(uid)\n    __S['liked', uid, sender] = True\n\n\n@__export('con_pixel_frames_master_v0_1')\ndef prove_ownership(uid: str, code: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_proof(uid, code)\n\n\ndef __assert_ownership(uid: str, sender):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    owner = thing_info.get_owner(uid)\n    assert owner == sender, uid + ' not owned by ' + sender\n\n\ndef __assert_already_owned(uid: str, sender):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    owner = thing_info.get_owner(uid)\n    assert owner != sender, uid + ' already owned by ' + sender\n\n\ndef __transfer_ownership(uid: str, new_owner: str):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    old_owner = thing_info.get_owner(uid)\n    thing_info.set_owner(uid, new_owner)\n    if thing_info.get_price_amount(uid) > 0:\n        thing_info.set_price(uid, 0, '')\n    __add_to_balance(new_owner)\n    __subtract_from_balance(old_owner)\n\n\ndef __add_to_balance(holder: str):\n    if __balances[holder] is None:\n        __balances[holder] = 1\n    else:\n        __balances[holder] = __balances[holder] + 1\n\n\ndef __subtract_from_balance(holder: str):\n    if __balances[holder] is None:\n        __balances[holder] = 0\n    else:\n        __balances[holder] = __balances[holder] - 1\n"
            },
            {
                "key": "con_pixel_frames_master_v0_1.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_master_v0_1.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        16,
                        10,
                        48,
                        27,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_master_v0_1.balances:5fa1b314468832fb9d391e8af756140e85325a565d8b411ae2f2001d37c30ef4",
                "value": 1
            },
            {
                "key": "con_pixel_frames_master_v0_1.metadata:operator",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_pixel_frames_master_v0_1.metadata:things_description",
                "value": "Create, Own and Sell unique pixel animations on the Lamden Blockchain!"
            },
            {
                "key": "con_pixel_frames_master_v0_1.metadata:things_name",
                "value": "Pixel Frames Test 2"
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:liked:091532b6abc085206f39040f7c4718ae184dab462b39e74bef0dd088481953c5:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": true
            },
            {
                "key": "con_pixel_frames_master_v0_3.S:thing_info_contract",
                "value": "con_pixel_frames_info_v0_3"
            },
            {
                "key": "con_pixel_frames_master_v0_3.__code__",
                "value": "import currency\nI = importlib\n__S = Hash(default_value='', contract='con_pixel_frames_master_v0_3', name='S')\n__balances = Hash(default_value=0, contract='con_pixel_frames_master_v0_3',\n    name='balances')\n__metadata = Hash(default_value=0, contract='con_pixel_frames_master_v0_3',\n    name='metadata')\n\n\ndef ____():\n    __S['thing_info_contract'] = 'con_pixel_frames_info_v0_3'\n    __metadata['operator'] = ctx.caller\n    __metadata['things_name'] = 'Pixel Frames Test 2'\n    __metadata['things_description'] = (\n        'Create, Own and Sell unique pixel animations on the Lamden Blockchain!'\n        )\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef create_thing(thing_string: str, name: str, description: str, meta: dict={}\n    ):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    sender = ctx.caller\n    thing_uid = thing_info.add_thing(thing_string, name, description, meta,\n        sender)\n    __add_to_balance(sender)\n    return thing_uid\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef buy_thing(uid: str):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    sender = ctx.caller\n    owner = thing_info.get_owner(uid)\n    creator = thing_info.get_creator(uid)\n    __assert_already_owned(uid, sender)\n    price_amount = thing_info.get_price_amount(uid)\n    royalty_percent = thing_info.get_royalty_amount(uid)\n    assert price_amount, uid + ' is not for sale'\n    assert price_amount > 0, uid + ' is not for sale'\n    price_hold = thing_info.get_price_hold(uid)\n    if price_hold != '':\n        assert sender == price_hold, uid + ' is being held for ' + price_hold\n    if royalty_percent > 0:\n        royalty_amount = price_amount * (royalty_percent / 100)\n        net_amount = price_amount - royalty_amount\n        currency.transfer_from(royalty_amount, creator, sender)\n    else:\n        net_amount = price_amount\n    currency.transfer_from(net_amount, owner, sender)\n    __transfer_ownership(uid, sender)\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef sell_thing(uid: str, amount: float):\n    __assert_ownership(uid, ctx.caller)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_price(uid, amount, '')\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef sell_thing_to(uid: str, amount: float, hold: str):\n    __assert_ownership(uid, ctx.caller)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_price(uid, amount, hold)\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef transfer(uid: str, new_owner: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    __assert_already_owned(uid, new_owner)\n    __transfer_ownership(uid, new_owner)\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef approve(uid: str, to: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    __balances[sender, uid, to] = True\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef revoke(uid: str, to: str):\n    __balances[ctx.caller, uid, to] = None\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef transfer_from(uid: str, to: str, main_account: str):\n    sender = ctx.caller\n    assert __balances[main_account, uid, sender\n        ], \"You have not been given approval to transfer this user's item.\"\n    __assert_ownership(uid, main_account)\n    __assert_already_owned(uid, to)\n    __transfer_ownership(uid, to)\n    __balances[main_account, uid, sender] = None\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef like_thing(uid: str):\n    sender = ctx.caller\n    assert __S['liked', uid, sender] == '', sender + ' already liked ' + uid\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.like_thing(uid)\n    __S['liked', uid, sender] = True\n\n\n@__export('con_pixel_frames_master_v0_3')\ndef prove_ownership(uid: str, code: str):\n    sender = ctx.caller\n    __assert_ownership(uid, sender)\n    thing_info = I.import_module(__S['thing_info_contract'])\n    thing_info.set_proof(uid, code)\n\n\ndef __assert_ownership(uid: str, sender):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    owner = thing_info.get_owner(uid)\n    assert owner == sender, uid + ' not owned by ' + sender\n\n\ndef __assert_already_owned(uid: str, sender):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    owner = thing_info.get_owner(uid)\n    assert owner != sender, uid + ' already owned by ' + sender\n\n\ndef __transfer_ownership(uid: str, new_owner: str):\n    thing_info = I.import_module(__S['thing_info_contract'])\n    old_owner = thing_info.get_owner(uid)\n    thing_info.set_owner(uid, new_owner)\n    if thing_info.get_price_amount(uid) > 0:\n        thing_info.set_price(uid, 0, '')\n    __add_to_balance(new_owner)\n    __subtract_from_balance(old_owner)\n\n\ndef __add_to_balance(holder: str):\n    if __balances[holder] is None:\n        __balances[holder] = 1\n    else:\n        __balances[holder] = __balances[holder] + 1\n\n\ndef __subtract_from_balance(holder: str):\n    if __balances[holder] is None:\n        __balances[holder] = 0\n    else:\n        __balances[holder] = __balances[holder] - 1\n"
            },
            {
                "key": "con_pixel_frames_master_v0_3.__developer__",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_master_v0_3.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        10,
                        1,
                        31,
                        0
                    ]
                }
            },
            {
                "key": "con_pixel_frames_master_v0_3.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 11
            },
            {
                "key": "con_pixel_frames_master_v0_3.balances:ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9",
                "value": 1
            },
            {
                "key": "con_pixel_frames_master_v0_3.balances:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": 1
            },
            {
                "key": "con_pixel_frames_master_v0_3.metadata:operator",
                "value": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce"
            },
            {
                "key": "con_pixel_frames_master_v0_3.metadata:things_description",
                "value": "Create, Own and Sell unique pixel animations on the Lamden Blockchain!"
            },
            {
                "key": "con_pixel_frames_master_v0_3.metadata:things_name",
                "value": "Pixel Frames Test 2"
            },
            {
                "key": "con_some_other_token.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token', name=\n    'balances')\n__metadata = Hash(contract='con_some_other_token', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        9,
                        36,
                        32,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_2ygtob.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_2ygtob',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_2ygtob', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_2ygtob')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_2ygtob')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_2ygtob')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_2ygtob')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_2ygtob.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_2ygtob.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        19,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_2ygtob.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_2ygtob.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_2ygtob.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_2ygtob.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_4ymc2e.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_4ymc2e',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_4ymc2e', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_4ymc2e')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_4ymc2e')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_4ymc2e')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_4ymc2e')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_4ymc2e.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_4ymc2e.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        11,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_4ymc2e.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_4ymc2e.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_4ymc2e.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_4ymc2e.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_5qoekn.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_5qoekn',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_5qoekn', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_5qoekn')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_5qoekn')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_5qoekn')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_5qoekn')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_5qoekn.__developer__",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_some_other_token_5qoekn.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        30,
                        21,
                        11,
                        37,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_5qoekn.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_5qoekn.metadata:operator",
                "value": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
            },
            {
                "key": "con_some_other_token_5qoekn.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_5qoekn.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_610arp.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_610arp',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_610arp', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_610arp')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_610arp')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_610arp')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_610arp')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_610arp.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_610arp.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        2,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_610arp.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_610arp.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_610arp.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_610arp.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_69js8i.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_69js8i',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_69js8i', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_69js8i')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_69js8i')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_69js8i')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_69js8i')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_69js8i.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_69js8i.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        25,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_69js8i.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_69js8i.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_69js8i.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_69js8i.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_6yzj.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_6yzj',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_6yzj', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_6yzj')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_6yzj')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_6yzj')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_6yzj')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_6yzj.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_6yzj.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        39,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_6yzj.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_6yzj.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_6yzj.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_6yzj.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_96flqb.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_96flqb',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_96flqb', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_96flqb')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_96flqb')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_96flqb')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_96flqb')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_96flqb.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_96flqb.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        22,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_96flqb.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_96flqb.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_96flqb.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_96flqb.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_bavd6.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_bavd6',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_bavd6', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_bavd6')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_bavd6')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_bavd6')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_bavd6')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_bavd6.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_bavd6.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        34,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_bavd6.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_bavd6.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_bavd6.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_bavd6.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_cmo2c.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_cmo2c',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_cmo2c', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_cmo2c')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_cmo2c')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_cmo2c')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_cmo2c')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_cmo2c.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_cmo2c.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        8,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_cmo2c.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_cmo2c.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_cmo2c.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_cmo2c.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_f2h9uu.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_f2h9uu',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_f2h9uu', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_f2h9uu')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_f2h9uu')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_f2h9uu')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_f2h9uu')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_f2h9uu.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_f2h9uu.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        9,
                        37,
                        1,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_f2h9uu.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_f2h9uu.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_f2h9uu.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_f2h9uu.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_gjilqp.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_gjilqp',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_gjilqp', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_gjilqp')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_gjilqp')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_gjilqp')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_gjilqp')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_gjilqp.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_gjilqp.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        5,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_gjilqp.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_gjilqp.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_gjilqp.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_gjilqp.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_hdpbly.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_hdpbly',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_hdpbly', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_hdpbly')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_hdpbly')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_hdpbly')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_hdpbly')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_hdpbly.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_hdpbly.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        58,
                        56,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_hdpbly.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_hdpbly.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_hdpbly.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_hdpbly.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_ib3z2x.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_ib3z2x',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_ib3z2x', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_ib3z2x')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_ib3z2x')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_ib3z2x')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_ib3z2x')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_ib3z2x.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_ib3z2x.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        26,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_ib3z2x.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_ib3z2x.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_ib3z2x.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_ib3z2x.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_pu2jf.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_pu2jf',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_pu2jf', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_pu2jf')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_pu2jf')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_pu2jf')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_pu2jf')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_pu2jf.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_pu2jf.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        31,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_pu2jf.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_pu2jf.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_pu2jf.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_pu2jf.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_qy7dao.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_qy7dao',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_qy7dao', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_qy7dao')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_qy7dao')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_qy7dao')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_qy7dao')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_qy7dao.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_qy7dao.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        42,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_qy7dao.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_qy7dao.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_qy7dao.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_qy7dao.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_sqszgo.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_sqszgo',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_sqszgo', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_sqszgo')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_sqszgo')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_sqszgo')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_sqszgo')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_sqszgo.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_sqszgo.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        18,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_sqszgo.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_sqszgo.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_sqszgo.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_sqszgo.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_u0ib9q.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_u0ib9q',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_u0ib9q', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_u0ib9q')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_u0ib9q')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_u0ib9q')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_u0ib9q')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_u0ib9q.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_u0ib9q.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        9,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_u0ib9q.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_u0ib9q.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_u0ib9q.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_u0ib9q.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_vfmsa9.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_vfmsa9',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_vfmsa9', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_vfmsa9')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_vfmsa9')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_vfmsa9')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_vfmsa9')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_vfmsa9.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_vfmsa9.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        37,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_vfmsa9.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_vfmsa9.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_vfmsa9.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_vfmsa9.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_x08jho.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_x08jho',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_x08jho', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_x08jho')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_x08jho')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_x08jho')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_x08jho')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_x08jho.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_x08jho.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        15,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_x08jho.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_x08jho.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_x08jho.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_x08jho.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_yc6c5w.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_yc6c5w',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_yc6c5w', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_yc6c5w')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_yc6c5w')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_yc6c5w')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_yc6c5w')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_yc6c5w.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_yc6c5w.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_yc6c5w.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_yc6c5w.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_yc6c5w.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_yc6c5w.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_some_other_token_yyvav.__code__",
                "value": "__balances = Hash(default_value=0, contract='con_some_other_token_yyvav',\n    name='balances')\n__metadata = Hash(contract='con_some_other_token_yyvav', name='metadata')\n\n\ndef ____():\n    __balances[ctx.caller] = 1000000\n    __metadata['token_name'] = 'Rocketswap Test Token'\n    __metadata['token_symbol'] = 'RSWP'\n    __metadata['operator'] = ctx.caller\n\n\n@__export('con_some_other_token_yyvav')\ndef change_metadata(key: str, value: Any):\n    assert ctx.caller == __metadata['operator'\n        ], 'Only operator can set metadata!'\n    __metadata[key] = value\n\n\n@__export('con_some_other_token_yyvav')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send!'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('con_some_other_token_yyvav')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('con_some_other_token_yyvav')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, ctx.caller], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"
            },
            {
                "key": "con_some_other_token_yyvav.__developer__",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_yyvav.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        26,
                        12,
                        59,
                        29,
                        0
                    ]
                }
            },
            {
                "key": "con_some_other_token_yyvav.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": 1000000
            },
            {
                "key": "con_some_other_token_yyvav.metadata:operator",
                "value": "4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62"
            },
            {
                "key": "con_some_other_token_yyvav.metadata:token_name",
                "value": "Rocketswap Test Token"
            },
            {
                "key": "con_some_other_token_yyvav.metadata:token_symbol",
                "value": "RSWP"
            },
            {
                "key": "con_test123.__code__",
                "value": "import currency\nI = importlib\n\n\n@__export('con_test123')\ndef send(addresses: list, amount: float, contract: str):\n    token = I.import_module(contract)\n    for address in addresses:\n        token.transfer_from(amount=amount, to=address, main_account=ctx.signer)\n"
            },
            {
                "key": "con_test123.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_test123.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        1,
                        18,
                        36,
                        49,
                        0
                    ]
                }
            },
            {
                "key": "con_test123456.__code__",
                "value": "__x = Variable(contract='con_test123456', name='x')\n\n\ndef ____():\n    __x.set('test')\n\n\n@__export('con_test123456')\ndef placeholder():\n    __x.set('break')\n\n\n@__export('con_test123456')\ndef placeholder2():\n    pass\n\n\n@__export('con_test123456')\ndef placeholder3():\n    pass\n"
            },
            {
                "key": "con_test123456.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_test123456.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        2,
                        6,
                        44,
                        31,
                        0
                    ]
                }
            },
            {
                "key": "con_test123456.x",
                "value": "break"
            },
            {
                "key": "con_test8.__code__",
                "value": "__x = Variable(contract='con_test8', name='x')\n__y = Hash(contract='con_test8', name='y')\n\n\ndef ____():\n    for __x in range(10):\n        __y[__x] = __x\n\n\n@__export('con_test8')\ndef placeholder():\n    __x.set('break')\n\n\n@__export('con_test8')\ndef placeholder2():\n    pass\n\n\n@__export('con_test8')\ndef placeholder3():\n    pass\n"
            },
            {
                "key": "con_test8.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_test8.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        2,
                        6,
                        45,
                        29,
                        0
                    ]
                }
            },
            {
                "key": "con_test8.y:0",
                "value": 0
            },
            {
                "key": "con_test8.y:1",
                "value": 1
            },
            {
                "key": "con_test8.y:2",
                "value": 2
            },
            {
                "key": "con_test8.y:3",
                "value": 3
            },
            {
                "key": "con_test8.y:4",
                "value": 4
            },
            {
                "key": "con_test8.y:5",
                "value": 5
            },
            {
                "key": "con_test8.y:6",
                "value": 6
            },
            {
                "key": "con_test8.y:7",
                "value": 7
            },
            {
                "key": "con_test8.y:8",
                "value": 8
            },
            {
                "key": "con_test8.y:9",
                "value": 9
            },
            {
                "key": "con_test81.__code__",
                "value": "random.seed()\n__x = Variable(contract='con_test81', name='x')\n__y = Hash(contract='con_test81', name='y')\n\n\ndef ____():\n    for __x in range(10):\n        __y[__x] = random.randint(0, 1000)\n\n\n@__export('con_test81')\ndef placeholder():\n    __x.set('break')\n\n\n@__export('con_test81')\ndef placeholder2():\n    for __x in range(99):\n        __y[__x] = __x\n\n\n@__export('con_test81')\ndef placeholder3():\n    pass\n"
            },
            {
                "key": "con_test81.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_test81.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        2,
                        6,
                        47,
                        6,
                        0
                    ]
                }
            },
            {
                "key": "con_test81.y:0",
                "value": 621
            },
            {
                "key": "con_test81.y:1",
                "value": 604
            },
            {
                "key": "con_test81.y:2",
                "value": 556
            },
            {
                "key": "con_test81.y:3",
                "value": 107
            },
            {
                "key": "con_test81.y:4",
                "value": 701
            },
            {
                "key": "con_test81.y:5",
                "value": 981
            },
            {
                "key": "con_test81.y:6",
                "value": 175
            },
            {
                "key": "con_test81.y:7",
                "value": 58
            },
            {
                "key": "con_test81.y:8",
                "value": 75
            },
            {
                "key": "con_test81.y:9",
                "value": 961
            },
            {
                "key": "con_test82.__code__",
                "value": "__x = Variable(contract='con_test82', name='x')\n__y = Hash(contract='con_test82', name='y')\n\n\ndef ____():\n    for __x in range(10):\n        __y[__x] = __x\n\n\n@__export('con_test82')\ndef placeholder():\n    __x.set('break')\n\n\n@__export('con_test82')\ndef placeholder2():\n    for __x in range(99):\n        __y[__x] = __x\n\n\n@__export('con_test82')\ndef placeholder3():\n    pass\n"
            },
            {
                "key": "con_test82.__developer__",
                "value": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9"
            },
            {
                "key": "con_test82.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        10,
                        2,
                        6,
                        46,
                        15,
                        0
                    ]
                }
            },
            {
                "key": "con_test82.y:0",
                "value": 0
            },
            {
                "key": "con_test82.y:1",
                "value": 1
            },
            {
                "key": "con_test82.y:10",
                "value": 10
            },
            {
                "key": "con_test82.y:11",
                "value": 11
            },
            {
                "key": "con_test82.y:12",
                "value": 12
            },
            {
                "key": "con_test82.y:13",
                "value": 13
            },
            {
                "key": "con_test82.y:14",
                "value": 14
            },
            {
                "key": "con_test82.y:15",
                "value": 15
            },
            {
                "key": "con_test82.y:16",
                "value": 16
            },
            {
                "key": "con_test82.y:17",
                "value": 17
            },
            {
                "key": "con_test82.y:18",
                "value": 18
            },
            {
                "key": "con_test82.y:19",
                "value": 19
            },
            {
                "key": "con_test82.y:2",
                "value": 2
            },
            {
                "key": "con_test82.y:20",
                "value": 20
            },
            {
                "key": "con_test82.y:21",
                "value": 21
            },
            {
                "key": "con_test82.y:22",
                "value": 22
            },
            {
                "key": "con_test82.y:23",
                "value": 23
            },
            {
                "key": "con_test82.y:24",
                "value": 24
            },
            {
                "key": "con_test82.y:25",
                "value": 25
            },
            {
                "key": "con_test82.y:26",
                "value": 26
            },
            {
                "key": "con_test82.y:27",
                "value": 27
            },
            {
                "key": "con_test82.y:28",
                "value": 28
            },
            {
                "key": "con_test82.y:29",
                "value": 29
            },
            {
                "key": "con_test82.y:3",
                "value": 3
            },
            {
                "key": "con_test82.y:30",
                "value": 30
            },
            {
                "key": "con_test82.y:31",
                "value": 31
            },
            {
                "key": "con_test82.y:32",
                "value": 32
            },
            {
                "key": "con_test82.y:33",
                "value": 33
            },
            {
                "key": "con_test82.y:34",
                "value": 34
            },
            {
                "key": "con_test82.y:35",
                "value": 35
            },
            {
                "key": "con_test82.y:36",
                "value": 36
            },
            {
                "key": "con_test82.y:37",
                "value": 37
            },
            {
                "key": "con_test82.y:38",
                "value": 38
            },
            {
                "key": "con_test82.y:39",
                "value": 39
            },
            {
                "key": "con_test82.y:4",
                "value": 4
            },
            {
                "key": "con_test82.y:40",
                "value": 40
            },
            {
                "key": "con_test82.y:41",
                "value": 41
            },
            {
                "key": "con_test82.y:42",
                "value": 42
            },
            {
                "key": "con_test82.y:43",
                "value": 43
            },
            {
                "key": "con_test82.y:44",
                "value": 44
            },
            {
                "key": "con_test82.y:45",
                "value": 45
            },
            {
                "key": "con_test82.y:46",
                "value": 46
            },
            {
                "key": "con_test82.y:47",
                "value": 47
            },
            {
                "key": "con_test82.y:48",
                "value": 48
            },
            {
                "key": "con_test82.y:49",
                "value": 49
            },
            {
                "key": "con_test82.y:5",
                "value": 5
            },
            {
                "key": "con_test82.y:50",
                "value": 50
            },
            {
                "key": "con_test82.y:51",
                "value": 51
            },
            {
                "key": "con_test82.y:52",
                "value": 52
            },
            {
                "key": "con_test82.y:53",
                "value": 53
            },
            {
                "key": "con_test82.y:54",
                "value": 54
            },
            {
                "key": "con_test82.y:55",
                "value": 55
            },
            {
                "key": "con_test82.y:56",
                "value": 56
            },
            {
                "key": "con_test82.y:57",
                "value": 57
            },
            {
                "key": "con_test82.y:58",
                "value": 58
            },
            {
                "key": "con_test82.y:59",
                "value": 59
            },
            {
                "key": "con_test82.y:6",
                "value": 6
            },
            {
                "key": "con_test82.y:60",
                "value": 60
            },
            {
                "key": "con_test82.y:61",
                "value": 61
            },
            {
                "key": "con_test82.y:62",
                "value": 62
            },
            {
                "key": "con_test82.y:63",
                "value": 63
            },
            {
                "key": "con_test82.y:64",
                "value": 64
            },
            {
                "key": "con_test82.y:65",
                "value": 65
            },
            {
                "key": "con_test82.y:66",
                "value": 66
            },
            {
                "key": "con_test82.y:67",
                "value": 67
            },
            {
                "key": "con_test82.y:68",
                "value": 68
            },
            {
                "key": "con_test82.y:69",
                "value": 69
            },
            {
                "key": "con_test82.y:7",
                "value": 7
            },
            {
                "key": "con_test82.y:70",
                "value": 70
            },
            {
                "key": "con_test82.y:71",
                "value": 71
            },
            {
                "key": "con_test82.y:72",
                "value": 72
            },
            {
                "key": "con_test82.y:73",
                "value": 73
            },
            {
                "key": "con_test82.y:74",
                "value": 74
            },
            {
                "key": "con_test82.y:75",
                "value": 75
            },
            {
                "key": "con_test82.y:76",
                "value": 76
            },
            {
                "key": "con_test82.y:77",
                "value": 77
            },
            {
                "key": "con_test82.y:78",
                "value": 78
            },
            {
                "key": "con_test82.y:79",
                "value": 79
            },
            {
                "key": "con_test82.y:8",
                "value": 8
            },
            {
                "key": "con_test82.y:80",
                "value": 80
            },
            {
                "key": "con_test82.y:81",
                "value": 81
            },
            {
                "key": "con_test82.y:82",
                "value": 82
            },
            {
                "key": "con_test82.y:83",
                "value": 83
            },
            {
                "key": "con_test82.y:84",
                "value": 84
            },
            {
                "key": "con_test82.y:85",
                "value": 85
            },
            {
                "key": "con_test82.y:86",
                "value": 86
            },
            {
                "key": "con_test82.y:87",
                "value": 87
            },
            {
                "key": "con_test82.y:88",
                "value": 88
            },
            {
                "key": "con_test82.y:89",
                "value": 89
            },
            {
                "key": "con_test82.y:9",
                "value": 9
            },
            {
                "key": "con_test82.y:90",
                "value": 90
            },
            {
                "key": "con_test82.y:91",
                "value": 91
            },
            {
                "key": "con_test82.y:92",
                "value": 92
            },
            {
                "key": "con_test82.y:93",
                "value": 93
            },
            {
                "key": "con_test82.y:94",
                "value": 94
            },
            {
                "key": "con_test82.y:95",
                "value": 95
            },
            {
                "key": "con_test82.y:96",
                "value": 96
            },
            {
                "key": "con_test82.y:97",
                "value": 97
            },
            {
                "key": "con_test82.y:98",
                "value": 98
            },
            {
                "key": "con_testing_it.__code__",
                "value": "I = importlib\n\n\n@__export('con_testing_it')\ndef send(addresses: list, amount: float, contract: str):\n    token = I.import_module(contract)\n    for address in addresses:\n        token.transfer_from(amount=amount, to=address, main_account=ctx.signer)\n"
            },
            {
                "key": "con_testing_it.__developer__",
                "value": "b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb98d"
            },
            {
                "key": "con_testing_it.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        8,
                        14,
                        13,
                        15,
                        53,
                        0
                    ]
                }
            },
            {
                "key": "currency.__code__",
                "value": "__balances = Hash(default_value=0, contract='currency', name='balances')\n__metadata = Hash(contract='currency', name='metadata')\n__permits = Hash(contract='currency', name='permits')\n__streams = Hash(contract='currency', name='streams')\nSENDER_KEY = 'sender'\nRECEIVER_KEY = 'receiver'\nSTATUS_KEY = 'status'\nBEGIN_KEY = 'begins'\nCLOSE_KEY = 'closes'\nRATE_KEY = 'rate'\nCLAIMED_KEY = 'claimed'\nSTREAM_ACTIVE = 'active'\nSTREAM_FINALIZED = 'finalized'\nSTREAM_FORFEIT = 'forfeit'\n\n\ndef ____(vk: str):\n    __balances[vk] = decimal('5555555.55')\n    __balances['team_lock'] = decimal('16666666.65')\n    __balances['dao'] = decimal('33333333.3')\n    __balances[vk] += decimal('49999999.95')\n    __balances[vk] += decimal('5555555.55')\n    __setup_seed_stream('team_lock', 'team_lock', vk, decimal(\n        '0.10575725568804825'), 1824)\n\n\ndef __setup_seed_stream(stream_id: str, sender: str, receiver: str, rate:\n    float, duration_days: int):\n    __streams[stream_id, 'status'] = 'active'\n    __streams[stream_id, 'begins'] = now\n    __streams[stream_id, 'closes'] = now + datetime.timedelta(days=\n        duration_days)\n    __streams[stream_id, 'receiver'] = receiver\n    __streams[stream_id, 'sender'] = sender\n    __streams[stream_id, 'rate'] = rate\n    __streams[stream_id, 'claimed'] = 0\n\n\n@__export('currency')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances.'\n    assert __balances[ctx.caller] >= amount, 'Not enough coins to send.'\n    __balances[ctx.caller] -= amount\n    __balances[to] += amount\n\n\n@__export('currency')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances.'\n    __balances[ctx.caller, to] += amount\n\n\n@__export('currency')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances.'\n    assert __balances[main_account, ctx.caller\n        ] >= amount, f'Not enough coins approved to send. You have {__balances[main_account, ctx.caller]} and are trying to spend {amount}'\n    assert __balances[main_account] >= amount, 'Not enough coins to send.'\n    __balances[main_account, ctx.caller] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n\n\n@__export('currency')\ndef balance_of(address: str):\n    return __balances[address]\n\n\n@__export('currency')\ndef permit(owner: str, spender: str, value: float, deadline: str, signature:\n    str):\n    deadline = __strptime_ymdhms(deadline)\n    permit_msg = __construct_permit_msg(owner, spender, value, str(deadline))\n    permit_hash = hashlib.sha3(permit_msg)\n    assert __permits[permit_hash] is None, 'Permit can only be used once.'\n    assert now < deadline, 'Permit has expired.'\n    assert crypto.verify(owner, permit_msg, signature), 'Invalid signature.'\n    __balances[owner, spender] += value\n    __permits[permit_hash] = True\n    return f'Permit granted for {value} to {spender} from {owner}'\n\n\ndef __construct_permit_msg(owner: str, spender: str, value: float, deadline:\n    str):\n    return f'{owner}:{spender}:{value}:{deadline}:{ctx.this}'\n\n\n@__export('currency')\ndef create_stream(receiver: str, rate: float, begins: str, closes: str):\n    begins = __strptime_ymdhms(begins)\n    closes = __strptime_ymdhms(closes)\n    sender = ctx.caller\n    stream_id = __perform_create_stream(sender, receiver, rate, begins, closes)\n    return stream_id\n\n\ndef __perform_create_stream(sender: str, receiver: str, rate: float, begins:\n    str, closes: str):\n    stream_id = hashlib.sha3(f'{sender}:{receiver}:{begins}:{closes}:{rate}')\n    assert __streams[stream_id, STATUS_KEY] is None, 'Stream already exists.'\n    assert begins < closes, 'Stream cannot begin after the close date.'\n    assert rate > 0, 'Rate must be greater than 0.'\n    __streams[stream_id, STATUS_KEY] = STREAM_ACTIVE\n    __streams[stream_id, BEGIN_KEY] = begins\n    __streams[stream_id, CLOSE_KEY] = closes\n    __streams[stream_id, RECEIVER_KEY] = receiver\n    __streams[stream_id, SENDER_KEY] = sender\n    __streams[stream_id, RATE_KEY] = rate\n    __streams[stream_id, CLAIMED_KEY] = 0\n    return stream_id\n\n\n@__export('currency')\ndef create_stream_from_permit(sender: str, receiver: str, rate: float,\n    begins: str, closes: str, deadline: str, signature: str):\n    begins = __strptime_ymdhms(begins)\n    closes = __strptime_ymdhms(closes)\n    deadline = __strptime_ymdhms(deadline)\n    assert now < deadline, 'Permit has expired.'\n    permit_msg = __construct_stream_permit_msg(sender, receiver, rate,\n        begins, closes, deadline)\n    permit_hash = hashlib.sha3(permit_msg)\n    assert __permits[permit_hash] is None, 'Permit can only be used once.'\n    assert crypto.verify(sender, permit_msg, signature), 'Invalid signature.'\n    __permits[permit_hash] = True\n    return __perform_create_stream(sender, receiver, rate, begins, closes)\n\n\n@__export('currency')\ndef balance_stream(stream_id: str):\n    assert __streams[stream_id, STATUS_KEY], 'Stream does not exist.'\n    assert __streams[stream_id, STATUS_KEY\n        ] == STREAM_ACTIVE, 'You can only balance active streams.'\n    assert now > __streams[stream_id, BEGIN_KEY], 'Stream has not started yet.'\n    sender = __streams[stream_id, SENDER_KEY]\n    receiver = __streams[stream_id, RECEIVER_KEY]\n    assert ctx.caller in [sender, receiver\n        ], 'Only sender or receiver can balance a stream.'\n    closes = __streams[stream_id, CLOSE_KEY]\n    begins = __streams[stream_id, BEGIN_KEY]\n    rate = __streams[stream_id, RATE_KEY]\n    claimed = __streams[stream_id, CLAIMED_KEY]\n    outstanding_balance = __calc_outstanding_balance(begins, closes, rate,\n        claimed)\n    assert outstanding_balance > 0, 'No amount due on this stream.'\n    claimable_amount = __calc_claimable_amount(outstanding_balance, sender)\n    __balances[sender] -= claimable_amount\n    __balances[receiver] += claimable_amount\n    __streams[stream_id, CLAIMED_KEY] += claimable_amount\n    return f'Claimed {claimable_amount} tokens from stream'\n\n\n@__export('currency')\ndef change_close_time(stream_id: str, new_close_time: str):\n    new_close_time = __strptime_ymdhms(new_close_time)\n    assert __streams[stream_id, STATUS_KEY], 'Stream does not exist.'\n    assert __streams[stream_id, STATUS_KEY\n        ] == STREAM_ACTIVE, 'Stream is not active.'\n    sender = __streams[stream_id, SENDER_KEY]\n    assert ctx.caller == sender, 'Only sender can extend the close time of a stream.'\n    if new_close_time < __streams[stream_id, BEGIN_KEY] and now < __streams[\n        stream_id, BEGIN_KEY]:\n        __streams[stream_id, CLOSE_KEY] = __streams[stream_id, BEGIN_KEY]\n    elif new_close_time <= now:\n        __streams[stream_id, CLOSE_KEY] = now\n    else:\n        __streams[stream_id, CLOSE_KEY] = new_close_time\n    return f'Changed close time of stream to {__streams[stream_id, CLOSE_KEY]}'\n\n\n@__export('currency')\ndef finalize_stream(stream_id: str):\n    assert __streams[stream_id, STATUS_KEY], 'Stream does not exist.'\n    assert __streams[stream_id, STATUS_KEY\n        ] == STREAM_ACTIVE, 'Stream is not active.'\n    sender = __streams[stream_id, 'sender']\n    receiver = __streams[stream_id, 'receiver']\n    assert ctx.caller in [sender, receiver\n        ], 'Only sender or receiver can finalize a stream.'\n    begins = __streams[stream_id, BEGIN_KEY]\n    closes = __streams[stream_id, CLOSE_KEY]\n    rate = __streams[stream_id, RATE_KEY]\n    claimed = __streams[stream_id, CLAIMED_KEY]\n    assert now <= closes, 'Stream has not closed yet.'\n    outstanding_balance = __calc_outstanding_balance(begins, closes, rate,\n        claimed)\n    assert outstanding_balance == 0, 'Stream has outstanding balance.'\n    __streams[stream_id, STATUS_KEY] = STREAM_FINALIZED\n    return f'Finalized stream {stream_id}'\n\n\n@__export('currency')\ndef close_balance_finalize(stream_id: str):\n    change_close_time(stream_id=stream_id, new_close_time=str(now))\n    balance_finalize(stream_id=stream_id)\n\n\n@__export('currency')\ndef balance_finalize(stream_id: str):\n    balance_stream(stream_id=stream_id)\n    finalize_stream(stream_id=stream_id)\n\n\n@__export('currency')\ndef forfeit_stream(stream_id: str) ->str:\n    assert __streams[stream_id, STATUS_KEY], 'Stream does not exist.'\n    assert __streams[stream_id, STATUS_KEY\n        ] == STREAM_ACTIVE, 'Stream is not active.'\n    receiver = __streams[stream_id, RECEIVER_KEY]\n    assert ctx.caller == receiver, 'Only receiver can forfeit a stream.'\n    __streams[stream_id, STATUS_KEY] = STREAM_FORFEIT\n    __streams[stream_id, CLOSE_KEY] = now\n    return f'Forfeit stream {stream_id}'\n\n\ndef __calc_outstanding_balance(begins: str, closes: str, rate: float,\n    claimed: float) ->float:\n    begins = begins\n    closes = closes\n    claimable_end_point = now if now < closes else closes\n    claimable_period = claimable_end_point - begins\n    claimable_seconds = claimable_period.seconds\n    amount_due = rate * claimable_seconds - claimed\n    return amount_due\n\n\ndef __calc_claimable_amount(amount_due: float, sender: str) ->float:\n    return amount_due if amount_due < __balances[sender] else __balances[sender\n        ]\n\n\ndef __construct_stream_permit_msg(sender: str, receiver: str, rate: float,\n    begins: str, closes: str, deadline: str) ->str:\n    return (\n        f'{sender}:{receiver}:{rate}:{begins}:{closes}:{deadline}:{ctx.this}')\n\n\ndef __strptime_ymdhms(date_string: str) ->datetime.datetime:\n    return datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n"
            },
            {
                "key": "currency.__developer__",
                "value": "sys"
            },
            {
                "key": "currency.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        10,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "currency.balances:009a51940e0271d9e9e89a59114c772c30a59f5dc7b4dd6835b537873ce5bcf2",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:02122bff580ac362bfa5578eda5fcac86db69f6a1d0c693dd0fe26183327e223",
                "value": {
                    "__fixed__": "46611.5493"
                }
            },
            {
                "key": "currency.balances:0334f3ace9a08e59ffe0a9bff4a2a4aaa399236baea77790c55ad316c5d4f03a",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:03e2669bf5a8190f8472fcf6f1cff2e6f36a81d2c9305020ba444679f196d2cb",
                "value": {
                    "__fixed__": "45943.4330"
                }
            },
            {
                "key": "currency.balances:03e2669bf5a8190f8472fcf6f1cff2e6f36a81d2c9305020ba444679f196d2cb:con_multisend",
                "value": {
                    "__fixed__": "899999999121.9003"
                }
            },
            {
                "key": "currency.balances:07b36fd0665f5f8d1fa0669546da85ca0d55146e777d154d8cee12637b3664ae",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:0cbe2684a639d06b2686668fddd6715a6606f4a0387356d5fbe6ede7f17b17cc",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:0d180b6005058e94b846067f72019354902ddcb893e0aadbd9ff5906bdd27d4f",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:0fcfbcfad7aaa445bd475bb4fc4b90c98185e5a3ce226bf9814e127bc80369df",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:10250ded416da98fea1b656428b489735c24028b9da688984f1af511fe499389",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:113afd6cd88bfc4e1ea6db381cc1e35f9bb40cd7b7f7d13af0a7768dcef8d61d",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:11b30eb3bd5f901ec5777463852773cc807abf04d57b00140e9d3473f1214bd7",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:1292142ab52b771006f313de5f605d2c907e6f85413ad04b9bcfca062916a3d0",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:15d37796203f4a711abd3557c442ec245ce06913ba782a7d0bf001afea9c88d1",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:17c9b53c69c4cd657f17ec068aa8e949bb097d5594930f844920e0f0595e4086",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:1b78824b1e5cc819e0d2bdab8b3dee4314f8e2a5c9a678bbbc53971172a04a09",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:1bdd2ccb6fe6f5dbdfea2b2330370acaaabdfee4c0092ac86626e53ff1fe6a7c",
                "value": {
                    "__fixed__": "311.6705"
                }
            },
            {
                "key": "currency.balances:1c93de62a1c5349a5884b83b2c02924f2e653c50b3f144f1006283006a8f2dc9",
                "value": {
                    "__fixed__": "86.2745"
                }
            },
            {
                "key": "currency.balances:1d3680e34fb0e5932326a55df98ec49142c27ee33ae0dd9fe871fc2735f50cd6",
                "value": {
                    "__fixed__": "45524.2034"
                }
            },
            {
                "key": "currency.balances:1e9043a943ec2985200029add5d031cbcc012ca8dc0b8ab6e7694bb475924c9b",
                "value": {
                    "__fixed__": "499.94"
                }
            },
            {
                "key": "currency.balances:1f8d6a8fad271296883cb1b10e29172145551a852140403e58e519dd0da80fce",
                "value": {
                    "__fixed__": "1048.0039"
                }
            },
            {
                "key": "currency.balances:218afa4c73b01b63b59c90b2b8357fbb4baf59fe04eeecdffabbf87810808ed8",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:245965f6cfe8ad238b41163aadc4b54810f2844e230b9aae9c20423d215cc6b3",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:2534096413fa989362e039996c2005c9475c1c15ef3ba37de8686ca3887e06db",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:26113242805cc769dd8155f8d5ac96196841bfa0f49448a77ddfa75bfd7b3bd7",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:2690c92b254fc1d3f157ac00ce6836d6c36500715b49f21c506d4180e61ab08b",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:28a08a7f89dc9822d039bbecd128ef7ab4b8f8b57fe9b33142ed56dae34256fc",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:292b346779dca86b8ffb979f48b590ea04c2d49d9fb505af9d6aa7e044a45269",
                "value": {
                    "__fixed__": "499309.6033"
                }
            },
            {
                "key": "currency.balances:292b346779dca86b8ffb979f48b590ea04c2d49d9fb505af9d6aa7e044a45269:con_multisend",
                "value": {
                    "__fixed__": "899999499989.9995"
                }
            },
            {
                "key": "currency.balances:2a789fa5ca705f2209f4f984af251b5726b046aaad3aaca0ff6db2f36b6801ce",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:2c387bd9dae8e63b96fb65f0ff5efe7d8a6400dcfeef1962d74f962ff91e9d74",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:2dfeb1760be18344950f5d99d19c57dcf062c109a8f6f641a5b7a0594695c0a4",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:2e0fb24203bac752d2f3430b7f69ad79a93b4d88cbdf39016b9174dc1907c9b7",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:2e8986af52acb0af0a6eb4a6cce09273c0c358526cf28a6d67d2d4fe917809e6",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:2fb8ef680fdfa963d40f4fc77994e9f36b7e4e8debeb2468e0c1272e1def96b2",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:31fa8d5a88d7ece9abaf312a76a9360fc314ecd2a2f0e9e44c5571d3ccd12595",
                "value": {
                    "__fixed__": "46471.0494"
                }
            },
            {
                "key": "currency.balances:32348c21a7fed16a98e20233b176cfe9b49c4534a6a07fe16794abb60857b44d",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:324cef4cac366a440eedcdf2f1b589c25afd3fae382850d9656e22473834f2c9",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:341cf6acaf74f798f956513c49fa609d2f49bb716e7b1fd1f909a3f22c856c41",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:35248b5fbeac2ec94ec89da03be17547eddddf1924c3f984e2cee520b6dbb7a7",
                "value": {
                    "__fixed__": "242.0626"
                }
            },
            {
                "key": "currency.balances:3949f668838b7d2dae11ad1ff62fcd4b0aaa1b9ab161ad9eda7ce787b7314790",
                "value": {
                    "__fixed__": "89.2745"
                }
            },
            {
                "key": "currency.balances:3a656b720fae8be43b39c9bd5edf96b239822bd57774a529653486c700604201",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:3c8cf450e5050cf1af5b2b50923571ee345726c6a4b7781ed909e9d1578e89fa",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:3c9a0d31f0fcc9aaec7989ba39ac766f346efb587a1ccabbcb528216451980dc",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:3ed84390b94ebfa41a989f39e1cba217272afe262dea82aae2ce0859c6c92ed6",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:4082f1e8274d62b838fc35016b3d3042961126f691b0f7fd8a6b649036e30f47",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:40ce7c141513d489767451d691434a67b409d8933ee7b67d8079340983a742ce",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:4108c82a05c2b538b8429a9928df058f9f90ca8249bd4fc8b76f0875fd53e18d",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:4397a1e4756f488b220d988bf18069826d8f13e19cd4b6274420d86f09f0a50b",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:4489385768afe2d66f5ca188924d273416fb69fe7625390cc5d2a728e443ff44",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:4493600174e51781d163cac8d6becb66fca61878a91a71253a72be567ac8ee62",
                "value": {
                    "__fixed__": "1.88"
                }
            },
            {
                "key": "currency.balances:449f6f2489854ec3173f7a7642d3732782c1d4b546eaf4a15c0024949e9f6488",
                "value": {
                    "__fixed__": "2000.0"
                }
            },
            {
                "key": "currency.balances:462bfea8cac53e1f97a34ad48eeea4b01bb164cea1730c2c8afd36d0651f5884",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:46e280ac6f5358623c5a98244c582427341185e471b001112698abeeada0bdf7",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:4a6c81cdb070e65239c9702c78946995bab3d7fbc3551d3a8263124ea7bbb603",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:4c5e1bf9ef741e9ce5d3e8d464f0aab2b0827d42ba0fbbe86cf774ebb4c9cc9b",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:4cc2d11f5943b9c3fb85459020c519ae48616833eb00cb172190e9122955104e",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:4d0bdd333d06cbd6b0c7fa91a40fd273152bf9a1b65ce3c17fdae23bbc77a2fe",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:4da2f1536b91d2a07111e32439e77ad7c33fd67c2023fb6c849b1b4ec949ad23",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:4f87e4c6d0f13650816cd3e6a3905854e39f8c8590570ec00ec06f80620c5596",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:50d10acdd5120ea81c4e6a1086733420e8a35cf479aa63eb7f8c3d699358fa7f",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:52226e31d56da22fa8ea0d8725790d26b9040580a2e5780926fdc348d9ccc65c",
                "value": {
                    "__fixed__": "0.05"
                }
            },
            {
                "key": "currency.balances:523e6ed96ede6ea00c0158d0b6cfb1f647f50ba3cf4a6a703f92aada2c288956",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:52c6f390ad93ca3c50353ecf095043c1e588706a2ea9194407af3019a6a02620",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:5592834d93a1a6292027ba1de347424aa3b964d51ace983d526bd9ce3dbb0d63",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:55fd70fbcd99f2ef97b55e7695f285fc9e58514c372d8b1ad9948bb71cf3872a",
                "value": {
                    "__fixed__": "46672.2748"
                }
            },
            {
                "key": "currency.balances:562953a4ac52f69d2453e0bd94164ff77a2c768e3edc7cd950a5b154d8f0bb70",
                "value": 1
            },
            {
                "key": "currency.balances:56710a628565623b4aca874c0d3c90353ee0a3076daf7810e9611f9a2d58b308",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:5a5128857a999aeae59dbf6a6d8a078a8e7d9f749372e68f08a5ea23bfa75954",
                "value": {
                    "__fixed__": "46611.5493"
                }
            },
            {
                "key": "currency.balances:5b11bfc76e15bb4889d5174eca4a5e45e6e4cad19260945cf7540143899f8abd",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:5fa1b314468832fb9d391e8af756140e85325a565d8b411ae2f2001d37c30ef4",
                "value": {
                    "__fixed__": "988.32"
                }
            },
            {
                "key": "currency.balances:60033a99b7eaf16d34986fc954b90f11d6c469138a5aeee08f7e72e7148b6a1c",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:6469db016e9444cec27e0e5ffcf0908cbeb2a6ee5ad29742ec46044266cc9e37",
                "value": {
                    "__fixed__": "69.6579"
                }
            },
            {
                "key": "currency.balances:64b0b4a380080c5700ed67bf5d65da7476bec271ef2bf7e6b520a0589b2fbf33",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:6650a7fab7625a5d518e5e6fc5cf021948a9c9b372a53bda9e39023cfb0d45a4",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:684a3925fa336b8728fb9b0ff036cd43701436b1b8b1f0786a5635eabdcb6f42",
                "value": {
                    "__fixed__": "69.4093"
                }
            },
            {
                "key": "currency.balances:684a3925fa336b8728fb9b0ff036cd43701436b1b8b1f0786a5635eabdcb6f42:con_multisend",
                "value": {
                    "__fixed__": "899999999285.0"
                }
            },
            {
                "key": "currency.balances:689384ec293634439772901663cdf71e92605e475df6f0f9354bf1cbc65dab1b",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:698b35e6d14a39404164de4e2fcce9a1a42b73793abc1ef2b199cb4b484ad800",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:699249a17519aa50b0c57c6db8ec46d4a81fc1f557031ef9a3edb2aa4a43a16d",
                "value": {
                    "__fixed__": "100.0"
                }
            },
            {
                "key": "currency.balances:69f2e1e4484efdb544c8e4631ab8a5bf632c9a55896cf67389d7fe8ba21b756a",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:6b05d08a2ae75b6824dfd441fb8b3c4244a1d1f9a61ffb4ada0aef99d685806e",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:6b596c4590a64651145a45a1e512eb6f1255124c06cae1e33586d3434b67e761",
                "value": {
                    "__fixed__": "5.9412"
                }
            },
            {
                "key": "currency.balances:6b85c0c1df49c0242cb9b7e88cb450c8d616cff6ccb40814a49f9d0e6f96c1d0",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:6bacb4f55fa1fa5cdb7cb62d714ada95a3e1933bed019aae51de93ba25b0f7fe",
                "value": {
                    "__fixed__": "24.0"
                }
            },
            {
                "key": "currency.balances:6be65ddc3deeedee0da09927cc60a7b3574f51781dbbf6bb144d10113135d36d",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:6bf489721faf4f0546f4ec5cb6c27336afe71240adb358a2a2cdceed8f48669f",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:6d2476cd66fa277b6077c76cdcd92733040dada2e12a28c3ebb08af44e12be76",
                "value": 1
            },
            {
                "key": "currency.balances:6d2fb38ce7cb48ddc937aae07c0502caa0e557a15d681b31c29e2fcb71d518b4",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:6d59caf4a0e552dee0f1859799946a7c93d23bb47428241543dfff3f201969ba",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:6f85df513837a0bb519448926d4f5a02326ea0b976d7938f1134a31d58389ad2",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:6f9327d04a24f49f1aabd45c249b17fbd263c72c723b4d18aebcfa316e7120b7",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:7011766abc7d61e27ed5de9114f68ae2116c72b712601d6e569fc3dc916b84bf",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:73cc03544f90fe810648a12e9095466a4f6bd0d6df9d27afe534614ef51ddb6f",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:74c10570fef76df12d86fad1354d2ec9ed24d41a1e91967c8e3968d0d91d3484",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:74ff1bc4c3a52ecdae2b0bc4a8c8c30e17feb0dd1861390d3f03c997659a7002",
                "value": {
                    "__fixed__": "1000.0"
                }
            },
            {
                "key": "currency.balances:7576acebb1ad304ea062251c3144d4fb589d8754a0fb4b43ccf6f513c4e779dd",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:7700a56411e0a10295355a1d31f5e95c136dc7fd0934ff336642081981f48cf8",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:777bdee9f2aa1f0b0a607596e8089e997735c2bb82a3652207710356dc4bcd08",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:77db4361d8e1e56f2500c0a3d11f45468a6f4580e0c9013779ffde29a18578cd",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:79e710423fe5c63514a2bc2c59bbec7d501fa8678b01f52973edca42c4886d88",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:7c829aba18409ce70bd6fec16cd57108862c3433c637e88087459d98acfcf40d",
                "value": {
                    "__fixed__": "75.02"
                }
            },
            {
                "key": "currency.balances:7cf9b40ca45a76c2ab617b3f12ca78e64b26c749ed795d8b9ae954cbb93457ca",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:7d65427969090966fa6ff23907a19894ffc4d605398a6794aa65b4942c78e3cc",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:7db66c7e3e4c9f26b5798872847e44a5b9697231eb657dd39177cba52991fd62",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:7ec1e28b95490a1a4e852b1195e3fc0ba46d3772304cb708d901d98cab547ea1",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e",
                "value": {
                    "__fixed__": "59126234.54618205352288775"
                }
            },
            {
                "key": "currency.balances:7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e:con_nameservice",
                "value": 1212121208
            },
            {
                "key": "currency.balances:8049737a45ad626f8fac584164d349383b5c23ad2b114db040c6d2e8d1d91a5a",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:82691a883586d5fd4520c4e3486148e026a5708e080bc9e055f14d6cfda2b5fd",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:82719726e23aded5e053e68ae1e810bee779b8f15bb63dad4efc59f23fa1940d",
                "value": {
                    "__fixed__": "4499.76"
                }
            },
            {
                "key": "currency.balances:82dede56091344f9c90af0b070f1f531b5d0c15903f69c0d6211e22c7bdf4839",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:8337979d4d85658456cc0ac567c1a6d5bcf0ba569adeb914db122ad157b3aa61",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:8359e7047e2966beee8014bdaea45ac471483fc0a552f3b57291f20d8f4a0588",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:8550bbc7f0abb5acdd759122f354b79ccd13f967e931e53b5a5574aa174e7e53",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:8c6df446e162aa40fb87d65185dfa40a3899aaddc2c6c02640c29c52b0187abe",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:8c7ebba26373d295fba548b1bd776559dfe4f522e534f753458108ff6fc6e5ce",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:8ce11ec41a14ba8a3545b3214f5913bb129bd686b392d496359fc98f89da490a",
                "value": {
                    "__fixed__": "991.74"
                }
            },
            {
                "key": "currency.balances:8e8b3f6bbd959687b6d655b6b430427c7b0233fb9544649c4796b5e9206357cc",
                "value": {
                    "__fixed__": "0.05"
                }
            },
            {
                "key": "currency.balances:90201230317f524333e9da87e93534c3575b982fef6db6b9dc1ca620efadff76",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:9146ca8fed18ef9088bc0d556b62ef624a5df6cc060724b9007ce5f8b0d8a2c6",
                "value": {
                    "__fixed__": "998.86"
                }
            },
            {
                "key": "currency.balances:92afb0278344d2269fe6f2fd42bc9930f3a64f25bcb513182f04d0dd1c21c5fd",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:930e930a545475a773040c77a39f8f3a66e702d13c0d1a0597bcb390f49d581e",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:9566460cd9f63e5f2687bb3e8e00c73a1119baed71d71008fdde05b07ca10026",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:96fdfb36c6217b8b0b9a152c1af439c72a6b3572d9a676049ad3452279879038",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:97aa5a647f0f855ddcb1d288790013ad2a6759388346d2cc5b0e143d9756d2ed",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:98e7f1842eb2546c5247d49e4898a8bf75b167723595fcaf6c02a4bb00c6922f",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:9b6400905671459c5c74ee129f865b9c7b855d082207c0cbb4fedf772adb3fc3",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:9bed9c6fbf3388899c75c7853a30e2e181fda8f3830694ef189ba9942cb65d93",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:9c5b999407700380c518899c61f51a823a2482a98eb05c23f5902b523af7397a",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:9d77acadacf6846db97e26965dfdd49b817107d388fb38eb111c3077eb7a4c60",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:a2a8d3a3856d903a185e4d65be73cfc7827bd1026c5724af8059f324bab116c7",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:a4225bf1732a21e02911b34bdfa36e4fded25df91b1a46556439d3d700ca1b3f",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:a5f99d3a4d6f32e7de173e8be8784ab0b905c98659ca9506e4f899134c298dac",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:a671bf670678fb7e9709d8a120e413ac30abe3311310f50ed496ba914ad10896",
                "value": {
                    "__fixed__": "72.1579"
                }
            },
            {
                "key": "currency.balances:aa6d42809ea13533d34a47f6d3a1bff753c68c749c9f1ee1f12cbb6b198861cf",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:aa82ed8ead8f0d49298ad959f6982222adc00e2a55e87980b2460d4c403fa4da",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:ab89a353b144ef3c2f8e8b50f161aeac4d0f2757b281aa9cf32b84724b257d73",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:ac12fa5c0566b96207de83af5f4ae4602784c95cf8937e9aaf92836aeaf2eb01",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:ae7ce55f75b6060c6515f5a7b0aaf9dd1da6a37e1e83704353a87489840f7a62",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:anywhere",
                "value": 1
            },
            {
                "key": "currency.balances:b0d142feb20d8328c78a5d5b3d45599d2e6075c8908511d4ef1fc9cadf31ed80",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:b1ef75e5ffffb058a2a4a5b121d2acb05ea70f618fdf2d73957fe8a468d0f330",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:b2adaf4baaebcd734a29f27f4f0451fe2fa513bd2ec1569fd036cc89667f5985",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:b457b5e5f7e96b152bc7e03fa5590ea412d81fd66d7dfa6a997cb9e6607aecae",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:b61d8dc59b47cf3e1bfe2d129661eb4fd83015452d5f15fe740e20e81d5b5137",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb980",
                "value": {
                    "__fixed__": "5.0"
                }
            },
            {
                "key": "currency.balances:b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb981",
                "value": {
                    "__fixed__": "730.0"
                }
            },
            {
                "key": "currency.balances:b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb98d",
                "value": {
                    "__fixed__": "15554.2920"
                }
            },
            {
                "key": "currency.balances:b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb98d:con_multi12345",
                "value": {
                    "__fixed__": "900000000000.0"
                }
            },
            {
                "key": "currency.balances:b6504cf056e264a4c1932d5de6893d110db5459ab4f742eb415d98ed989bb98d:con_multisend",
                "value": {
                    "__fixed__": "899999987109.0020"
                }
            },
            {
                "key": "currency.balances:b72392169f5f8c62cc72b79b22e86d26031f9eb5b3cb3d60dd8650e918fe611f",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:b837124b7cbe977e8a4dce74b2b24a2634c3dd01797bd1baa4369c296b2a3881",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:b9477b4780c97d18683e5123424e3e6cc554aabea29f79b60d2a142765781415",
                "value": {
                    "__fixed__": "14.4188996872998442747"
                }
            },
            {
                "key": "currency.balances:be033abce4b62ac96366bc16b1a5bdc35404acffbbb1e347046381d08c34d291",
                "value": {
                    "__fixed__": "2.0"
                }
            },
            {
                "key": "currency.balances:be033abce4b62ac96366bc16b1a5bdc35404acffbbb1e347046381d08c34d295",
                "value": {
                    "__fixed__": "248.8212"
                }
            },
            {
                "key": "currency.balances:bea0ea30705cd5bb5fc73f128db4165736bbab3b8962ae8cd4a7651d0e63b216",
                "value": {
                    "__fixed__": "2.5"
                }
            },
            {
                "key": "currency.balances:bfd7a0df8f3ecb74c22e601dd7928f275918a3d1c86eab169858d0db41f38dc9",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:c0a6aada8581976060d83db7f5295a8200b8506c8fd503ea84596f90a4dded4f",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:c170b1f85dc23033307bbf0d182a6dd4e1a8979cd4d4c07f0bc462076538ce9d",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:c58d04dfd0412178f14d2885ac32912d131c3bf2ebfaf449dfccf49d5a9118c4",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:c71389d2d3461a029d9a655f8d1026902cea3ca58f02807a5fbf995615a5d9d3",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:c7c35fcce46edd5ce7507e7ada3b5ef9f83a8d989cb9b101ee348659e6f6eed2",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:c8103f212e4b556afdf1e3873192f22d1c90cfcfe8a6dbe62b116c2dc9613785",
                "value": {
                    "__fixed__": "2.9412"
                }
            },
            {
                "key": "currency.balances:c86d320ff5b6165b0bde4dbca7c6c25f36243630dc3325a2738bf99c59801f4f",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:ca4ebdf557eae168bc5cabc85b98f1f43a4131faab877eef09b429e02d5175e5",
                "value": {
                    "__fixed__": "45527.2034"
                }
            },
            {
                "key": "currency.balances:cc81ca9eef4ecb6b87f55dcffd939a44b597fb82f43744a832aa385c84e40c95",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:cd85dc5319271ccc2a6a3bd10a40b4f14e34b3e0cca9a8900cd9401cd8689f78",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:cd9e4a66b51fc8b7a84fa0b8bd9f774d7dafc8bcf6cac298d648497e0d3f4ea6",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:ce0d9d7f6d08a197b097ceffd173fe8371273c6ec1a33e17527a941cb2d7b396",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:cf726cb470a740ebd8c5d20d8ae112191aa2e3098f5c9ace262c9b6e1e6b7b9c",
                "value": {
                    "__fixed__": "10946.8960"
                }
            },
            {
                "key": "currency.balances:d0362296b1cec350045e6409829cba364ebc79b9495955b84c2ab37e07ee8376",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:d1492cf0a03be4648171c616e23cd384a0755ebd0b0275885ead920c1e2f47c1",
                "value": {
                    "__fixed__": "8.4412"
                }
            },
            {
                "key": "currency.balances:d3065270fcadb9eb08ef067f70fd39b6b9f397b781dd8f9971d535f2f6ebb1aa",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:d401dfc0ca591362cc74f67fd89d5a294409931fead7365f8a806c3d9b81d271",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:d4b06d6c108b38624dc2749f398ff3c54fba78c0e4ca621cf46a97f5111dcea8",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:d4e8a1c6e7f472d72ebd468d5aae90582426597ffb0c9965fa2c03783dc0934c",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:d4f51477c4792c0351d3e4db3ddb09d6f9acd9013cdcd99a19ab6657e6c189a5",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:d71fa8a431240ce123cb0a9f224a3179d9a3989bde6482db431c64d3c9f83d7e",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:d75fabe94182d81a2930b1ee153a20f42cfc748803be2537629f69cc78c57017",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:d847fa66c1b202aa72a5f47de1cad5a5a33b6022eb4513648ba9a96ef79d83d6",
                "value": {
                    "__fixed__": "10.8843685844062307037"
                }
            },
            {
                "key": "currency.balances:d96afcfcbb9d656b0e75b544b90acd2cb7a48378279c21d55aeb554d99a79e4d",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:dao",
                "value": {
                    "__fixed__": "33333333.3"
                }
            },
            {
                "key": "currency.balances:dc713dd0be95c670c1ba8dba60067b93bd6e8f845a12748e8623e8ba6792a3be",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:dd0d8a6b62c884e523f2634089307e7b76584aa4ac176afed7522e82e792849a",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:dd302e35427beeb5180ff15d1ae2cc94022bf3472789201177c7a88207427863",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:dfb2bbbbf7e24a30217cb1ed0e4696bbc7db6da719b5dfa0415f57df4aebc395",
                "value": {
                    "__fixed__": "15.57537181885815781687"
                }
            },
            {
                "key": "currency.balances:dff5d54d9c3cdb04d279c3c0a123d6a73a94e0725d7eac955fdf87298dbe45a6",
                "value": {
                    "__fixed__": "1736.59920000"
                }
            },
            {
                "key": "currency.balances:e0c405adfb8c86724c858501978c1b1482abadf792c88621790ad0c700373692",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:e0fbdee6626672004795dbeb1d3b8f6d9fb1bbd4060a0a9da17951555bfe38d4",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:e1b58d9dad786d47ff7d66b30c09406eb5080250f8f355b4e1b969dc342b83ec",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:e1df68ef8ac03e3c235e3f0d9497774558d0894842c540406a430123d3e4db99",
                "value": {
                    "__fixed__": "0.054253994911106032"
                }
            },
            {
                "key": "currency.balances:e46d50bde84de2f74748b97a80e33da1d724ca91ceeddd9fe677d0e585fe3ec0",
                "value": {
                    "__fixed__": "0.02717551965806646"
                }
            },
            {
                "key": "currency.balances:e6b22e83fc9b7d538f451253bef32d0807c10b12653282b2b9672689d33fd2ba",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": {
                    "__fixed__": "1037082.54961196584094681140"
                }
            },
            {
                "key": "currency.balances:e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931:con_multisend",
                "value": {
                    "__fixed__": "15000899999998411.34151196584094681140"
                }
            },
            {
                "key": "currency.balances:eb4c17d980c91677e204d55b7ac2f5980885281dfbe037546bbcb3b0341cda02",
                "value": {
                    "__fixed__": "13.91059900603940955793"
                }
            },
            {
                "key": "currency.balances:eb54256f48209f229633ce181a2021a4085b1f4dc120cd62404d1c9241705390",
                "value": {
                    "__fixed__": "13.46616375083513467054"
                }
            },
            {
                "key": "currency.balances:ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9",
                "value": {
                    "__fixed__": "906.9914"
                }
            },
            {
                "key": "currency.balances:f03b351c034831e3245af4b6115b7761f8f785cd14f335365d42a57972394517",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:f5bdce0a60d1ea3db3eafd3daf923d27035824aa1d0ec4a179dced3d2be26143",
                "value": {
                    "__fixed__": "46520.5367"
                }
            },
            {
                "key": "currency.balances:f6f5e390665501dcff39c8e0a081be3ceef29d086e1ae528227bcb23b62d1371",
                "value": {
                    "__fixed__": "0.183451410162264206"
                }
            },
            {
                "key": "currency.balances:f762d1004d3fdac41105818c6aae9318a26aa6a3e094ea327afb043dba2b71d5",
                "value": {
                    "__fixed__": "49.0815677560897834045"
                }
            },
            {
                "key": "currency.balances:f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": {
                    "__fixed__": "43355.2390"
                }
            },
            {
                "key": "currency.balances:f8e50a34e0ab068450b67f0855763ac9de1db6be2b19e82748dfb9232e915ea5",
                "value": {
                    "__fixed__": "152.9412"
                }
            },
            {
                "key": "currency.balances:fb484707cb9b899ce939d2b673bcc9c470f6ddabf19050605974e8974c47a3bc",
                "value": {
                    "__fixed__": "14.61628350261848495716"
                }
            },
            {
                "key": "currency.balances:fb6acac7d637ed9e8eee654eddf78730b4cd8664dce4432a3fc94a693100292b",
                "value": {
                    "__fixed__": "2.2397818801588677477"
                }
            },
            {
                "key": "currency.balances:fccc61c6f445f324cf9eac00e997e0e0545e9a75d8eca8d3f04803eb6bfeff18",
                "value": {
                    "__fixed__": "5.19690543642048939296"
                }
            },
            {
                "key": "currency.balances:fe778793ec610bef1f7ea888d23d9a41df088049b3612d34167fc38b6b17bfa2",
                "value": {
                    "__fixed__": "2.5883480666084075728"
                }
            },
            {
                "key": "currency.balances:feee860b9b553049346a8092f07233842dd1abc7a9a5eaeff95dde7920e36dd4",
                "value": {
                    "__fixed__": "0.122598389349658522"
                }
            },
            {
                "key": "currency.balances:team_lock",
                "value": {
                    "__fixed__": "16656788.18201794647711225"
                }
            },
            {
                "key": "currency.balances:wallet_address",
                "value": 7
            },
            {
                "key": "currency.streams:team_lock:begins",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        10,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "currency.streams:team_lock:claimed",
                "value": {
                    "__fixed__": "9878.46798205352288775"
                }
            },
            {
                "key": "currency.streams:team_lock:closes",
                "value": {
                    "__time__": [
                        2029,
                        6,
                        8,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "currency.streams:team_lock:rate",
                "value": {
                    "__fixed__": "0.10575725568804825"
                }
            },
            {
                "key": "currency.streams:team_lock:receiver",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "currency.streams:team_lock:sender",
                "value": "team_lock"
            },
            {
                "key": "currency.streams:team_lock:status",
                "value": "active"
            },
            {
                "key": "dao.__code__",
                "value": "import currency\n\n\n@__export('dao')\ndef transfer_from_dao(args: dict):\n    amount = args.get('amount')\n    to = args.get('to')\n    assert amount > 0, 'Amount must be greater than 0'\n    currency.transfer(amount=amount, to=to)\n"
            },
            {
                "key": "dao.__developer__",
                "value": "sys"
            },
            {
                "key": "dao.__owner__",
                "value": "masternodes"
            },
            {
                "key": "dao.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        10,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "foundation.__code__",
                "value": "import currency\n__owner = Variable(contract='foundation', name='owner')\n\n\ndef ____(vk: str):\n    __owner.set(vk)\n\n\n@__export('foundation')\ndef withdraw(amount: float):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert ctx.caller == __owner.get(), 'Not owner!'\n    currency.transfer(amount, ctx.caller)\n\n\n@__export('foundation')\ndef change_owner(vk: str):\n    assert ctx.caller == __owner.get(), 'Not owner!'\n    __owner.set(vk)\n"
            },
            {
                "key": "foundation.__developer__",
                "value": "sys"
            },
            {
                "key": "foundation.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        10,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "foundation.owner",
                "value": "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
            },
            {
                "key": "masternodes.__code__",
                "value": "import dao\nimport rewards\nimport stamp_cost\nimport currency\n__nodes = Variable(contract='masternodes', name='nodes')\n__votes = Hash(default_value=False, contract='masternodes', name='votes')\n__total_votes = Variable(contract='masternodes', name='total_votes')\n__types = Variable(contract='masternodes', name='types')\n__registration_fee = Variable(contract='masternodes', name='registration_fee')\n__pending_registrations = Hash(default_value=False, contract='masternodes',\n    name='pending_registrations')\n__pending_leave = Hash(default_value=False, contract='masternodes', name=\n    'pending_leave')\n__holdings = Hash(default_value=0, contract='masternodes', name='holdings')\n\n\ndef ____(genesis_nodes: list, genesis_registration_fee: int):\n    __nodes.set(genesis_nodes)\n    __types.set(['add_member', 'remove_member', 'change_registration_fee',\n        'reward_change', 'dao_payout', 'stamp_cost_change', 'change_types'])\n    __total_votes.set(0)\n    __registration_fee.set(genesis_registration_fee)\n\n\n@__export('masternodes')\ndef propose_vote(type_of_vote: str, arg: Any):\n    assert ctx.caller in __nodes.get(), 'Only nodes can propose new votes'\n    if type_of_vote == 'add_member':\n        assert __pending_registrations[arg\n            ] == True, 'Member must have pending registration'\n    assert type_of_vote in __types.get(), 'Invalid type'\n    proposal_id = __total_votes.get() + 1\n    __votes[proposal_id] = {'yes': 1, 'no': 0, 'type': type_of_vote, 'arg':\n        arg, 'voters': [ctx.caller], 'finalized': False}\n    __total_votes.set(proposal_id)\n    if len(__votes[proposal_id]['voters']) >= len(__nodes.get()) // 2:\n        if not __votes[proposal_id]['finalized']:\n            __finalize_vote(proposal_id)\n    return proposal_id\n\n\n@__export('masternodes')\ndef vote(proposal_id: int, vote: str):\n    assert ctx.caller in __nodes.get(), 'Only nodes can vote'\n    assert __votes[proposal_id], 'Invalid proposal'\n    assert __votes[proposal_id]['finalized'\n        ] == False, 'Proposal already finalized'\n    assert vote in ['yes', 'no'], 'Invalid vote'\n    assert ctx.caller not in __votes[proposal_id]['voters'], 'Already voted'\n    cur_vote = __votes[proposal_id]\n    cur_vote[vote] += 1\n    cur_vote['voters'].append(ctx.caller)\n    __votes[proposal_id] = cur_vote\n    if len(__votes[proposal_id]['voters']) >= len(__nodes.get()) // 2:\n        if not __votes[proposal_id]['finalized']:\n            __finalize_vote(proposal_id)\n    return cur_vote\n\n\ndef __finalize_vote(proposal_id: int):\n    cur_vote = __votes[proposal_id]\n    if cur_vote['yes'] > cur_vote['no']:\n        if cur_vote['type'] == 'add_member':\n            __nodes.set(__nodes.get() + [cur_vote['arg']])\n        elif cur_vote['type'] == 'remove_member':\n            __nodes.set([node for node in __nodes.get() if node != cur_vote\n                ['arg']])\n            __force_leave(cur_vote['arg'])\n        elif cur_vote['type'] == 'reward_change':\n            rewards.set_value(new_value=cur_vote['arg'])\n        elif cur_vote['type'] == 'dao_payout':\n            dao.transfer_from_dao(args=cur_vote['arg'])\n        elif cur_vote['type'] == 'stamp_cost_change':\n            stamp_cost.set_value(new_value=cur_vote['arg'])\n        elif cur_vote['type'] == 'change_registration_fee':\n            __registration_fee.set(cur_vote['arg'])\n        elif cur_vote['type'] == 'change_types':\n            __types.set(cur_vote['arg'])\n    cur_vote['finalized'] = True\n    __votes[proposal_id] = cur_vote\n    return cur_vote\n\n\ndef __force_leave(node: str):\n    __pending_leave[node] = now + datetime.timedelta(days=7)\n\n\n@__export('masternodes')\ndef announce_leave():\n    assert ctx.caller in __nodes.get(), 'Not a node'\n    assert __pending_leave[ctx.caller] == False, 'Already pending leave'\n    __pending_leave[ctx.caller] = now + datetime.timedelta(days=7)\n\n\n@__export('masternodes')\ndef leave():\n    assert __pending_leave[ctx.caller\n        ] < now, 'Leave announcement period not over'\n    if ctx.caller in __nodes.get():\n        __nodes.set([node for node in __nodes.get() if node != ctx.caller])\n    __pending_leave[ctx.caller] = False\n\n\n@__export('masternodes')\ndef register():\n    assert ctx.caller not in __nodes.get(), 'Already a node'\n    assert __pending_registrations[ctx.caller\n        ] == False, 'Already pending registration'\n    currency.transfer_from(amount=__registration_fee.get(), to=ctx.this,\n        main_account=ctx.caller)\n    __holdings[ctx.caller] = __registration_fee.get()\n    __pending_registrations[ctx.caller] = True\n\n\n@__export('masternodes')\ndef unregister():\n    assert ctx.caller not in __nodes.get(\n        ), \"If you're a node already, you can't unregister. You need to leave or be removed.\"\n    assert __pending_registrations[ctx.caller\n        ] == True, 'No pending registration'\n    if __holdings[ctx.caller] > 0:\n        currency.transfer(__holdings[ctx.caller], ctx.caller)\n    __pending_registrations[ctx.caller] = False\n    __holdings[ctx.caller] = 0\n"
            },
            {
                "key": "masternodes.__developer__",
                "value": "sys"
            },
            {
                "key": "masternodes.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        10,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "masternodes.nodes",
                "value": [
                    "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931"
                ]
            },
            {
                "key": "masternodes.registration_fee",
                "value": 100000
            },
            {
                "key": "masternodes.total_votes",
                "value": 7
            },
            {
                "key": "masternodes.types",
                "value": [
                    "add_member",
                    "remove_member",
                    "change_registration_fee",
                    "reward_change",
                    "dao_payout",
                    "stamp_cost_change",
                    "change_types"
                ]
            },
            {
                "key": "masternodes.votes:1",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "reward_change",
                    "arg": [
                        0.78,
                        0.11,
                        0.01,
                        0.1
                    ],
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "masternodes.votes:2",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "reward_change",
                    "arg": [
                        0.45,
                        0.45,
                        0.09,
                        0.01
                    ],
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "masternodes.votes:3",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "reward_change",
                    "arg": [
                        0.45,
                        0.01,
                        0.09,
                        0.45
                    ],
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "masternodes.votes:4",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "stamp_cost_change",
                    "arg": 50,
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "masternodes.votes:5",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "reward_change",
                    "arg": [
                        0.49,
                        0.49,
                        0.01,
                        0.01
                    ],
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "masternodes.votes:6",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "reward_change",
                    "arg": [
                        0.49,
                        0.01,
                        0.49,
                        0.01
                    ],
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "masternodes.votes:7",
                "value": {
                    "yes": 1,
                    "no": 0,
                    "type": "reward_change",
                    "arg": [
                        0.49,
                        0.01,
                        0.01,
                        0.49
                    ],
                    "voters": [
                        "7fa496ca2438e487cc45a8a27fd95b2efe373223f7b72868fbab205d686be48e"
                    ],
                    "finalized": true
                }
            },
            {
                "key": "rewards.S:value",
                "value": [
                    0.49,
                    0.01,
                    0.01,
                    0.49
                ]
            },
            {
                "key": "rewards.__code__",
                "value": "__S = Hash(contract='rewards', name='S')\n\n\ndef ____(initial_split: list=[decimal('0.88'), decimal('0.01'), decimal(\n    '0.01'), decimal('0.1')]):\n    __S['value'] = initial_split\n\n\n@__export('rewards')\ndef current_value():\n    return __S['value']\n\n\n@__export('rewards')\ndef set_value(new_value: list):\n    assert len(new_value) == 4, 'New value must be a list of 4 elements'\n    assert sum(new_value) == 1, 'Sum of new value must be 1'\n    __S['value'] = new_value\n"
            },
            {
                "key": "rewards.__developer__",
                "value": "sys"
            },
            {
                "key": "rewards.__owner__",
                "value": "masternodes"
            },
            {
                "key": "rewards.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        10,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "stamp_cost.S:value",
                "value": 50
            },
            {
                "key": "stamp_cost.__code__",
                "value": "__S = Hash(contract='stamp_cost', name='S')\n\n\ndef ____(initial_rate: int=100):\n    __S['value'] = initial_rate\n\n\n@__export('stamp_cost')\ndef current_value():\n    return __S['value']\n\n\n@__export('stamp_cost')\ndef set_value(new_value: int):\n    assert new_value > 0, 'New value must be greater than 0'\n    __S['value'] = new_value\n"
            },
            {
                "key": "stamp_cost.__developer__",
                "value": "sys"
            },
            {
                "key": "stamp_cost.__owner__",
                "value": "masternodes"
            },
            {
                "key": "stamp_cost.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        10,
                        13,
                        39,
                        0,
                        0
                    ]
                }
            },
            {
                "key": "submission.__code__",
                "value": "@__export('submission')\ndef submit_contract(name: str, code: str, owner: Any=None, constructor_args: dict={}):\n    if ctx.caller != 'sys':\n        assert name.startswith('con_'), 'Contract must start with con_!'\n\n    assert ctx.caller == ctx.signer, 'Contract cannot be called from another contract!'\n    assert len(name) <= 64, 'Contract name length exceeds 64 characters!'\n    assert name.islower(), 'Contract name must be lowercase!'\n\n    __Contract().submit(\n        name=name,\n        code=code,\n        owner=owner,\n        constructor_args=constructor_args,\n        developer=ctx.caller\n    )\n\n\n@__export('submission')\ndef change_developer(contract: str, new_developer: str):\n    d = __Contract()._driver.get_var(contract=contract, variable='__developer__')\n    assert ctx.caller == d, 'Sender is not current developer!'\n\n    __Contract()._driver.set_var(\n        contract=contract,\n        variable='__developer__',\n        value=new_developer\n    )\n"
            },
            {
                "key": "submission.__submitted__",
                "value": {
                    "__time__": [
                        2024,
                        6,
                        18,
                        16,
                        32,
                        44,
                        484123
                    ]
                }
            }
        ],
        "nonces": [
            {
                "key": "9146ca8fed18ef9088bc0d556b62ef624a5df6cc060724b9007ce5f8b0d8a2c6",
                "value": 0
            },
            {
                "key": "e9e8aad29ce8e94fd77d9c55582e5e0c57cf81c552ba61c0d4e34b0dc11fd931",
                "value": 32
            },
            {
                "key": "ee06a34cf08bf72ce592d26d36b90c79daba2829ba9634992d034318160d49f9",
                "value": 10
            },
            {
                "key": "f84eae148729b12f79875be889933ad378ffa4d4fcb5ec65d2e314b8730b1fce",
                "value": 2
            }
        ]
    }
}